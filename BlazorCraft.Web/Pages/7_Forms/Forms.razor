@page "/forms"
@using BlazorCraft.Web.Pages._3_Components
@using BlazorCraft.Web.Pages._4_RenderFragments
@using BlazorCraft.Web.Shared._Exercises._6_DependencyInjection
@using BlazorCraft.Web.Shared._Exercises.DependencyInjection
@using BlazorCraft.Web.Shared.Examples._7_Forms
@using BlazorCraft.Web.Tests.Forms
@using IEmployeeService = BlazorCraft.Web.Shared._Exercises.DependencyInjection.IEmployeeService
<MudText Typo="Typo.h4">Forms</MudText>
<div class="d-grid gap-3">
@*<MudText Typo="Typo.h6" Class="fw-bold">What is dependency injection?</MudText>*@
<MudText>
    So far, we have only covered how to display data that has already been provided, now it is time to dig ourselves into how to
    create and edit data, and also how to validate it.
    Please note, that this is a much more complex and larger topic than you will see here. The scope of this application is to provide you
    knowledge for the basics that you can build on later if you decide to learn blazor more throroughly.
    Forms will be no exception to this, however, everything that you will need for the exam exercise will naturally be covered in the chapters.
</MudText>
<MudExpansionPanels MultiExpansion="true">
<MudExpansionPanelWithStoredState Id="forms-form">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="fw-bold">The blazor EditForm</MudText>
    </TitleContent>
    <ChildContent>
        <div class="d-grid gap-3">
            <MudText>
                If you are familiar with pure html forms, all of this should be very familiar to you.
                The core concept for html forms is the following:
                <ul>
                    <li>
                        <MudText>Define a form with the @("<form>") tag</MudText>
                    </li>
                    <li>
                        <MudText>Add input fields for the form with the @("<input>") tag</MudText>
                    </li>
                    <li>
                        <MudText>Dedicate a button that handles the submission of the form</MudText>
                    </li>
                </ul>
            </MudText>
            <MudText>Something like this: </MudText>
            <AdvancedCodeSnippet TComponent="RawHtmlFormExample" RenderOutput="true"/>
            <MudText>This is so far basically the same example that we used for two way data binding. The Submit button would just reload the page, so it is disabled.</MudText>
            <MudText>
                The core idea with blazor is actually the same, but of course with blazor components, and with tons
                of customizeability.
            </MudText>
            <MudText>
                <ul>
                    <li>
                        <MudText>Instead of the @("<form>") tag, we are going to use the @("<EditForm>") component</MudText>
                        <MudText>To declare an EditForm in blazor, we must either provide it a Model, or a ValidationContext</MudText>
                        <MudText>
                            A model is passed if we do not require a custom validation logic, while passing an EditContext allows us to customize
                            how and when the form is validated exactly
                        </MudText>
                        <MudText>
                            <strong>Note: </strong>The usecase of passing an EditContext will NOT be covered
                        </MudText>
                    </li>
                    <li>
                        <MudText>Instead of @("<input>") tags, we are going to use the @("<Input*>") components</MudText>
                        <MudText>
                            There are several Input component provided by blazor built-in, here is a list of them:
                        </MudText>
                        <MudSimpleTable>
                            <thead>
                            <tr>
                                <th class="fw-bold">Component name</th>
                                <th class="fw-bold">.NET type to be used with</th>
                                <th class="fw-bold">Comment</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td class="fw-bold">@("<InputText>")</td>
                                <td class="fw-bold"> string</td>
                                <td>Used for standard text input</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">@("<InputTextArea>")</td>
                                <td class="fw-bold"> string</td>
                                <td>Used for multi-line text input.</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">@("<InputNumber>")</td>
                                <td class="fw-bold">int, double, float, decimal.</td>
                                <td>Automatically restricts input to numbers and supports decimal values.</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">@("<InputDate>")</td>
                                <td class="fw-bold">DateTime, DateTimeOffset</td>
                                <td>Pops up a date picker in most modern browsers.</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">@("<InputCheckbox>")</td>
                                <td class="fw-bold">bool </td>
                                <td> Represents a checkbox for toggling a true/false state.</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">@("<InputSelect>")</td>
                                <td class="fw-bold"> enum or a list of items.</td>
                                <td>Used for dropdown lists. It can bind to any enumerable property, requires the use of @("<option>") elements to define the selectable options.</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">@("<InputRadio>")and @("<InputRadioGroup>")</td>
                                <td class="fw-bold"> enums or other grouped values</td>
                                <td> Used for radio button inputs. Radio buttons are used for choosing one option from a set, and @("<InputRadioGroup>") helps group them logically.</td>
                            </tr>
                            </tbody>
                        </MudSimpleTable>
                    </li>
                </ul>
            </MudText>
            <MudText>
                Let's see the previous example with the blazor component palette
            </MudText>
            <AdvancedCodeSnippet TComponent="EditFormExample" RenderOutput="true"/>

        </div>
    </ChildContent>
</MudExpansionPanelWithStoredState>

<MudExpansionPanelWithStoredState Id="forms-validation">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="fw-bold">Validation</MudText>
    </TitleContent>
    <ChildContent>
        <div class="d-grid gap-3">
            <MudText>So far what we have seen may not be too convincing to use blazor forms, its power starts to shine, once we want to validate our models</MudText>
            <MudText>
                There are various techniques to validate blazor form models, however the most straightforward, and the one we are going to use is
                using the built-in <strong>@("<DataAnnotationsValidator>")</strong>. With its usage, we can annotate our model properties with rules that they need to match
                before the form could be declared as a valid form.
            </MudText>
            <MudText>
                To declare rules for the Fields, we can use various attributes, already predefined:
                <MudSimpleTable>
                    <thead>
                    <tr>
                        <th class="fw-bold">Attribute name</th>
                        <th class="fw-bold">Description</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>
                            <strong>[Required]</strong>
                        </td>
                        <td>
                            Commonly used for mandatory fields in forms.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[StringLength(MaxLength, MinimumLength = MinLength)]</strong>
                        </td>
                        <td>
                            Useful for fields like passwords, where a specific length range is necessary.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[Range(MinValue, MaxValue)]</strong>
                        </td>
                        <td>
                            Ensures that a numeric value falls within a specified range.
                            Ideal for age, price, or quantity fields where values must be within certain limits.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[EmailAddress]</strong>
                        </td>
                        <td>
                            Validates that a string is a valid email address format.
                            Automatically checks for common email formatting, simplifying email validations.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[RegularExpression(RegexPattern)]</strong>
                        </td>
                        <td>
                            Validates that a string matches a specified regular expression pattern.
                            Highly customizable for complex validation scenarios, like phone numbers or custom formats.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[Compare(OtherPropertyName)]</strong>
                        </td>
                        <td>
                            Ensures that two properties in a model have the same value, often used for confirming passwords.
                            Essential for scenarios like account registration or settings where confirmation of input is required.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[CreditCard]</strong>
                        </td>
                        <td>
                            Validates that a string follows the format of a credit card number.
                            Automatically checks for valid credit card number format, including checks for common card types.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[Phone]</strong>
                        </td>
                        <td>
                            Ensures that a string is in a valid phone number format.
                            Useful for contact information forms, checks for standard phone number formatting.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[MaxLength(Length)] and [MinLength(Length)]</strong>
                        </td>
                        <td>
                            Specify the maximum or minimum length of a string.
                            These are simpler alternatives to [StringLength] when only one length constraint is needed.
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <strong>[Url]</strong>
                        </td>
                        <td>
                            Validates that a string is a valid URL.
                            Automatically checks for common URL formatting, useful for links or web references.
                        </td>
                    </tr>
                    </tbody>
                </MudSimpleTable>
            </MudText>
            <MudText>
                To show validation errors we have two options (We can use both of course, if we want to):
                <ul>
                    <li>
                        <MudText>Displaying validation messages per field. This can be achieved by the @("<ValidationMessage>") tag</MudText>
                    </li>
                    <li>
                        <MudText>Displaying all validation messages for the entire form. This can be achieved by the @("<ValidationSummary>") tag</MudText>
                    </li>
                </ul>
            </MudText>
            <MudText>
                With validation added to the forms, our submit button begins to make sense.
                However, we only want to submit the form, if it is actually in a valid state.
                The EditForm contains 3 component events that give us control what should happen if
                <ul>
                    <li>The form is submitted -> <strong>OnSubmit</strong></li>
                    <li>A valid form is submitted -> <strong>OnValidSubmit</strong></li>
                    <li>An invalid form is submitted -> <strong>OnInvalidSubmit</strong></li>
                </ul>
            </MudText>
            <MudText>Let's see an example where the fields are required, and the result is only shown, if the form is in a valid state: </MudText>
            <AdvancedCodeSnippet TComponent="DataAnnotationsValidatorExample" RenderOutput="true"/>
        </div>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="forms-exercise">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_Forms_Ex_LessonFinal">
            <MudText Typo="Typo.h6" Class="fw-bold">Lesson final exercise</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <div class="d-grid gap-3">
            <MudText>
                Your exercise here will be to Reuse the List component that you created in the Final exercise for <MudPageLink PageType="typeof(RenderFragments)">Render fragments</MudPageLink>:
                <strong>@nameof(RenderFragments_LessonFinal)</strong>
            </MudText>
            <MudText Class="fw-bold">
                That was a challenging exercise to get there, so let's collect dividends on the hard work!
                We will reuse that component quite a couple of times, as it provides a very good foundation for topics to build upon
            </MudText>
            <MudText>
                Your task will be to create a form, where we can add new employees and add them to the list.
                Naturally, only valid employees can be added
            </MudText>
            <MudText>
                For the exercise, you will need to modify the component @(nameof(DependencyInjection_Ex_LessonFinal)).razor and also
                you will have to register @nameof(IEmployeeService) in
                @(nameof(DependencyInjection_EmployeeServiceRegistration)).@nameof(DependencyInjection_EmployeeServiceRegistration.AddEmployeeService)
            </MudText>
            <MudText>
                Every further instruction for you is provided in @(nameof(DependencyInjection_Ex_LessonFinal)).razor
            </MudText>
            <MudText>Good luck!</MudText>
            <MudExpansionPanel>
                <TitleContent>Hint, if you are stuck</TitleContent>
                <ChildContent>
                    <MudText>
                        While sync methods (any method that does not return a task and does not have the async keyword) can be called inside the razor markup,
                        This is not the case for async methods, since they are typically long running operations. Therefore, you will need to store its result in a field,
                        which needs to be initiated in a lifecycle method.
                    </MudText>
                    <MudText>
                        We have covered a technique, to mitigate this issue in the <MudPageLink PageType="typeof(ComponentLifecycle)">Component lifecycle</MudPageLink> chapter
                    </MudText>
                </ChildContent>
            </MudExpansionPanel>
            <TestRunner TTestClass="Test_Forms_Ex_LessonFinal"
                        ComponentUnderTestParameters="@(new Dictionary<string, object>() { })">
            </TestRunner>
        </div>
    </ChildContent>
</MudExpansionPanelWithStoredState>
</MudExpansionPanels>
</div>

@code {

}