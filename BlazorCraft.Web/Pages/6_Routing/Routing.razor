@page "/routing"
@using BlazorCraft.Web.Shared._Exercises._6_Routing
@using BlazorCraft.Web.Shared.Examples._6_Routing.ExampleUsages
@using BlazorCraft.Web.Tests._6_Routing
<MudText Typo="Typo.h4">Routing</MudText>
<SpacedContent>
<MudText Typo="Typo.h6" Class="fw-bold">What is routing?</MudText>
<MudText>
    Routing is what defines with what url you can reach a page. For example, this page can be reached with the <strong>/routing</strong> route.
</MudText>
<MudText>
    In most mvc applications these routes are mapped by convention in a <strong>/{controler}/{action}</strong> manner.
    In blazor, there is no such convention, you can instead define pages that can have any routes that you define.
</MudText>

<MudExpansionPanels MultiExpansion="true">
<MudExpansionPanelWithStoredState Id="defining-routes">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_Routing_Ex1_Basics">
            <MudText Typo="Typo.h6" Class="fw-bold">Defining routes</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>
                To define the pages route, we need to use the <strong>@("""@page /{route}""")</strong> like this:
            </MudText>
            <AdvancedCodeSnippet TComponent="DefiningRoute"/>
            <MudText>
                In the background this is going to become a <strong>[RouteAttribute]</strong>
            </MudText>
            <CodeSnippet Language="csharp">
                @("""[global::Microsoft.AspNetCore.Components.RouteAttribute("/resource/subresource")]""" + "\n" +
                  """public partial class DefiningRoute : global::Microsoft.AspNetCore.Components.ComponentBase""")
            </CodeSnippet>
            <MudText>This is also evidence, that blazor pages are essentially blazor components that are decorated with a <strong>[RoutAttribute]</strong></MudText>
            <MudText>These routes are configured to be automatically looked up by the application's <strong>Router</strong> type. This is configured in the <strong>App.razor</strong> file</MudText>
            <AdvancedCodeSnippet TComponent="App" RenderOutput="false"/>
            <MudText>You can also define multiple routes for the pages, in this case, they will be reachable by all of its page routes</MudText>
            <AdvancedCodeSnippet TComponent="MultipleRoutes" RenderOutput="false"/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>Your task here is to modify the component <ComponentFileWithPath T="Routing_Ex1" /> so that it has can be reached via two route urls:</MudText>
            <ul>
                <li>
                    <MudText Class="fw-bold">/@Test_Routing_Ex1_Basics.Route1</MudText>
                </li>
                <li>
                    <MudText Class="fw-bold">/@Test_Routing_Ex1_Basics.Route2</MudText>
                </li>
            </ul>
            @*TODO Remove rendered component from here*@
            <TestRunner TTestClass="Test_Routing_Ex1_Basics" TestComponentName="@nameof(Routing_Ex1)"></TestRunner>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="routeparameters">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_Routing_Ex2_RouteParams">
            <MudText Typo="Typo.h6" Class="fw-bold">Route parameters</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>Pages can have have route parameters, which can then be passed as url parameters from the browser.</MudText>
            <MudText>
                They are essentially component parameters, and thus need to be defined the same way with the <strong>[Parameter]</strong> attribute.
                The only extra thing that we need to do is to add the parameter to the route declaration in curly braces: <strong>@("""@page "/myroute/{parameterName}" """)</strong>
            </MudText>
            <CompanionSnippets TComponent="PageWithRouteParameter" TUsage="PageWithRouteParameterUsage" />
            <MudText>Alternatively you can take a look at it as a page by navigating to the page itself <MudLink Href="/page-with-route-parameter/Mystring" Underline="Underline.Always">here</MudLink></MudText>
            <MudText>
                <Important>Be careful! Even if you define multiple routes with different parameters, the routes have to be unique!</Important>
            </MudText>
            <MudDivider/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here is to modify the component <ComponentFileWithPath T="Routing_Ex2"/> so that it has can be reached via the url: <strong>/@Test_Routing_Ex2_RouteParams.Route</strong>
                and also, it should have a <strong>string</strong> route parameter with the name <strong>@Test_Routing_Ex2_RouteParams.RouteParamName</strong>.
            </MudText>
            <MudText>The component should only render the value of the route parameter inside a <strong>@("<p>")</strong> tag</MudText>

            <TestRunner TTestClass="Test_Routing_Ex2_RouteParams" TestComponentName="@nameof(Routing_Ex2)"></TestRunner>

        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="constraining-route-parameters">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_Routing_Ex3_RouteConstraints">
            <MudText Typo="Typo.h6" Class="fw-bold">Route parameter constraints</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>
                Routing in Blazor also allows you to add type constraints to your route parameters.
                Say you have a page for displaying employee details but only for a specific employee.
                For this, you will want to pass the employee Id to the page so that it can load the resources for that specific employee
                You can set this up with route constraints.
            </MudText>
            <MudText>
                Just like regular route parameters, constrained parameters also need to be wrapped in curly braces in the route declaration.
                The only difference is that you add a colon and the type of constraint right after the parameter name.
                For instance, if you want to ensure that the parameter is an integer, your route will look like this:
                <strong>@("""@page "/employee/{employeeId:int}" """)</strong>.
            </MudText>
            <MudText>
                So, it's not just about specifying what parameters you'll accept, but also what kind of data those parameters should be.
                This way, the page only loads if the conditions are met.
            </MudText>
            <AdvancedCodeSnippet TComponent="EmployeeDetails" RenderOutput="false"/>
            <MudText>Then we can use the page like below. Alternatively you can visit the page <MudLink Href="/employee/details/2">here</MudLink></MudText>
            <AdvancedCodeSnippet TComponent="EmployeeDetailsUsage" RenderOutput="true"/>
            <MudText Typo="Typo.h6" Class="fw-bold">Valid constraint types</MudText>
            <MudTable T="UsableConstraints" Items="_usableConstraints">
                <HeaderContent>
                    <MudTh>Declaration</MudTh>
                    <MudTh>.NET type</MudTh>
                    <MudTh>Valid examples</MudTh>
                    <MudTh>Invalid examples</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <strong>@context.Constraint</strong>
                    </MudTd>
                    <MudTd>
                        <strong>@context.dotnettype</strong>
                    </MudTd>
                    <MudTd>
                        <ul>
                            @foreach (var example in @context.Valid)
                            {
                                <li>@example</li>
                            }
                        </ul>
                    </MudTd>
                    <MudTd>
                        <ul>
                            @foreach (var example in @context.Invalid)
                            {
                                <li>@example</li>
                            }
                        </ul>
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudDivider/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here is to modify the component <ComponentFileWithPath T="Routing_Ex3"/> so that it has can be reached via the url: <strong>/@Test_Routing_Ex3_RouteConstraints.Route</strong>
                and also, it should have a route parameter with the name <strong>@Test_Routing_Ex3_RouteConstraints.RouteParamName</strong>,
                and also constraint to the type <strong>int</strong>
            </MudText>
            <MudText>The component should only render the value of the route parameter inside a <strong>@("<p>")</strong> tag</MudText>

            <TestRunner TTestClass="Test_Routing_Ex3_RouteConstraints"></TestRunner>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="optional-route-parameters">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_Routing_Ex4_OptionalRouteParams">
            <MudText Typo="Typo.h6" Class="fw-bold">Optional route parameters</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>
                Route parameters can be made optional by placing <Important>?</Important> after them
            </MudText>
            <MudText>
                <strong>Note: </strong> By default, parameter types are strings if no type constraint is specified, therefore if you want to have an optional string route parameter,
                you can define it without the type constraint, like this: <strong>/route/{MyParam?}</strong>
            </MudText>
            <AdvancedCodeSnippet TComponent="EmployeeDetailsOptionalParameter" RenderOutput="false"/>
            <MudText>This way, if no value is assigned to it, it will get the default value.</MudText>
            <MudText>
                <strong>Note: </strong> In the example the default value is explicitly set. If no logic is defined, then the parameter will get the default value of the corresponding type.
                With int? it is null, if we defined it as int, then the default value assigned would be 0
            </MudText>
            <AdvancedCodeSnippet TComponent="EmployeeDetailsWithOptionalParameterUsage" RenderOutput="true"/>
            <MudText>You can also check out the page and play with the route parameter <MudLink Href="employee/details-optional-param">here</MudLink></MudText>
            <MudDivider/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here is to modify the component <ComponentFileWithPath T="Routing_Ex4" /> so that it has can be reached via the url: <strong>/@Test_Routing_Ex3_RouteConstraints.Route</strong>
                and also, it should have a route parameter with the name <strong>@Test_Routing_Ex4_OptionalRouteParams.RouteParamName</strong>,
                and also constraint to the type <strong>int</strong>
            </MudText>
            <ul>
                <li>
                    <MudText>If the route parameter has been assigned a value, then to component should render it inside a <strong>@("p")</strong> tag</MudText>
                </li>
                <li>
                    <MudText>If the route parameter has <strong>NOT</strong> been assigned a value, then to component should render <strong>"The parameter value is empty"</strong> inside a <strong>@("p")</strong> tag</MudText>
                </li>
            </ul>
            <TestRunner TTestClass="Test_Routing_Ex4_OptionalRouteParams"></TestRunner>
        </SpacedContent>
    </ChildContent>

</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="routing-final-exercise">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_Routing_Ex5_LessonFinal">
            <MudText Typo="Typo.h6" Class="fw-bold">Lesson final exercise</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>In this exercise, you will have to modify the component <ComponentFileWithPath T="Routing_Ex5"/></MudText>
            <MudText>Your task is to modify it, so that employees can bee looked up via two types of identifiers</MudText>
            <MudText>You will find a list of Employees, with the Employee type having an additional Id: CompanyAccountId</MudText>
            <MudText>You will need to create two routes:</MudText>
            <ul>
                <li>
                    <MudText>/@Test_Routing_Ex5_LessonFinal.RouteById -> for the use-case, when an employee is searched for via its <strong>Id</strong> </MudText>
                </li>
                <li>
                    <MudText>/@Test_Routing_Ex5_LessonFinal.RouteByCompanyAccountId -> for the use-case, when an employee is searched for via its <strong>CompanyAccountId</strong></MudText>
                </li>
            </ul>
            <MudText>In both cases, it should be possible to configure via the url, if all data for the employee should be shown, or only the names
                This route parameter will be called <strong>/@Test_Routing_Ex5_LessonFinal.AllDataRouteParam</strong></MudText>
            <ul>
                <li>
                    <MudText>
                        If all data is selected to be shown, then the component should render a row like this (based on the id of course):
                        <CodeSnippet>@("<p>Employee id: 1, Company assigned identifier: aaaa, Name: Test theodore, Position: CEO</p>")</CodeSnippet>
                    </MudText>
                </li>
                <li>
                    <MudText>
                        Otherwise, the component should render a row like this (based on the id of course):
                        <CodeSnippet>@("<p>Test theodore</p>")</CodeSnippet>
                    </MudText>
                </li>
            </ul>
            <MudText>If the employee cannot be found by the given id,then the component should render this row:
                <CodeSnippet>@("<p>Employee not found</p>")</CodeSnippet>
                </MudText>
            <MudText>
                If no identifier is passed via the url, then the component should render this row:
                <CodeSnippet>@("<p>No identifier received</p>")</CodeSnippet>
            </MudText>
            <TestRunner TTestClass="Test_Routing_Ex5_LessonFinal"></TestRunner>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
</MudExpansionPanels>
</SpacedContent>


@code {

    record UsableConstraints(string Constraint, string dotnettype, List<string> Valid, List<String> Invalid);

    List<UsableConstraints> _usableConstraints = new()
    {
        new(":bool", "System.Boolean", new() { "false", "true", "1" }, new() { "Hello" }),
        new(":datetime", "System.DateTime", new() { "2001-01-01", "02-29-2000", }, new() { "29-02-2000", }),
        new(":decimal", "System.Decimal", new() { "2.34", "0.234", }, new() { "2,34", "૦.૨૩૪", }),
        new(":double", "System.Double", new() { "2.34", "0.234", }, new() { "2,34", "૦.૨૩૪", }),
        new(":float", "System.Single", new() { "2.34", "0.234", }, new() { "2,34", "૦.૨૩૪", }),
        new(":guid", "System.Guid", new() { "99303dc9-8c76-42d9-9430-de3ee1ac25d0", }, new() { "{99303dc9-8c76-42d9-9430-de3ee1ac25d0}", }),
        new(":int", "System.Int32", new() { "-1", "42", "299792458", }, new() { "12.34", "૨૩", }),
        new(":long", "System.Int64", new() { "-1", "42", "299792458", }, new() { "12.34", "૨૩", }),
    };

}