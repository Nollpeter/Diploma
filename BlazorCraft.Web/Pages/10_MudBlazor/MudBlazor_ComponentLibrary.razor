@page "/mudblazor"
@using BlazorCraft.Web.Shared.Examples._10_MudBlazor

<MudText Typo="Typo.h4">Using Mudblazor</MudText>
<SpacedContent>
    <MudText>
        So far for every UI element we used either plain html, or built-in Microsoft components
        <br/>
        While they work perfectly fine, it is a real hassle to customize them, challenging to reuse and they are visually not so appealing out-of-box
    </MudText>
    <MudText>
        As with any other UI frameworks, there are already existing third party component libraries that we can use, blazor is no exception.
    </MudText>
    <MudText>
        The component library that we are going to use is called <strong>MudBlazor</strong>. We are going to use it, because it is free, open-source and easy to use component library, with nice material design, and last but not least, I like it.
        Hope you will too! :)
    </MudText>
    <MudText>
        We are not going to go into its very depth, we are only going to cover some important elements that will be used in the exam exercise
    </MudText>
    <MudText>
        If you are interested in the rest of the components provided by <strong>MudBlazor</strong>, you can check out the full palette <MudLink Href="https://mudblazor.com/docs/overview" Underline="Underline.Always" Color="Color.Primary">here</MudLink>
    </MudText>
    <MudText>
        There will be no exercises for this chapter, as you will need only some very basic components of <strong>MudBlazor</strong>, for which you can very easily reconfigure them, to suit the needs to the exam exercise
    </MudText>
    <MudExpansionPanels>
        <MudExpansionPanelWithStoredState Id="texts">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Texts</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>So far for text content, we mostly used the <strong>@("<p>")</strong> tag. It works fine, however MudBlazor provides us with a very nice text toolset with the <strong>@("<MudText>")</strong> component</MudText>
                    <MudText>We can configure the text type with the <strong>Typo attribute</strong>. If we do not configure it, it will be automatically <strong>Typo.body1</strong></MudText>
                    <MudText>
                        Whenever we wanted to add an html component a css class, we used the <strong>@("class")</strong> attribute.
                        For MudBlazor components, the same can be achieved with the <strong>@("Class")</strong> attribute
                    </MudText>
                    <MudText>If we want to make the text bold, we can give it the <strong>"fw-bold"</strong> Class</MudText>
                    <AdvancedCodeSnippet TComponent="MudText_Typo" RenderOutput="true"></AdvancedCodeSnippet>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="buttons">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Buttons</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>MudBlazor also makes it easier for us to declare buttons, that look nice and easy to work with</MudText>
                    <MudText>There are three variants of buttons: <strong>Filled, Outlined, Text</strong></MudText>
                    <AdvancedCodeSnippet TComponent="MudButton_Variants" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                    <MudText>It's color can be set via the <strong>Color</strong> attribute</MudText>
                    <AdvancedCodeSnippet TComponent="MudButton_Colors" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                    <MudText>We can assign click handlers with <strong>OnClick</strong> attribute. It is an <strong>EventCallback</strong>, so sync and async methods can be assigned to it as well.</MudText>
                    <AdvancedCodeSnippet TComponent="MudButton_OnClick" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="table">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">MudTable</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>MudBlazor also allows us to render tables in a much more convenient way, than we did with advanced RenderFragments.</MudText>
                    <MudText>Instead of manually declaring our table with foreaches, we can use the <strong>@("<MudTable>")</strong> component</MudText>
                    <MudText>
                        It lets us provide a source collection with which we wish to populate the table, then lets us declare a
                        <ul>
                            <li><strong>HeaderContent</strong>, where we can define headers in <strong>@("<MudTh>")</strong> tags</li>
                            <li><strong>RowTemplate</strong> where we can define headers in <strong>@("<MudTd>")</strong> tags. Also, we can use the <strong>@("context")</strong> variable to render each property</li>
                        </ul>
                    </MudText>
                    <AdvancedCodeSnippet TComponent="MudTable_Example" RenderOutput="true"></AdvancedCodeSnippet>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="form-and-form-elements">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Form and Form elements</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        Using forms is very similar to how we used them before. We will still use the <strong>@("<EditForm>")</strong> component with the <strong>@("<DataAnnotationsValidator>")</strong> component for validation.
                    </MudText>
                    <MudText>
                        The difference will be with the form elements. MudBlazor equips us with the same type of form elements that we used with the built-in Blazor components, however they are much easier to use and look much better
                    </MudText>
                    <MudText>
                        For submitting forms, we will use a <strong>MudButton</strong> with <strong>ButtonType="ButtonType.Submit"</strong>
                    </MudText>
                    <MudDivider></MudDivider>
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">Text inputs</MudText>
                    <MudText>For text inputs, we can use the <strong>@("<MudTextField>")</strong> and <strong>@("<MudNumericField>")</strong> components</MudText>
                    <MudText>We can bind their values with two way data-binding using the <strong>@("@bind-Value")</strong> markup</MudText>
                    <MudText>For validation to work, we will use the <strong>@("For")</strong> attribute. We will need to provide it with the same Expression as <strong>@("<ValidationMessage>")</strong></MudText>
                    <MudText>For labels, we can use the <strong>@("Label")</strong> attribute instead of a separate tag for labels</MudText>
                    <AdvancedCodeSnippet TComponent="MudTextField_Example" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">Date inputs</MudText>
                    <MudText>For date inputs, we can use the <strong>@("<MudDatePicker>")</strong> component</MudText>
                    <MudText>We can bind its value with two way data-binding using the <strong>@("@bind-Date")</strong> markup</MudText>
                    <MudText>Validation and labeling works the same way as it did with <strong>@("<MudTextField>")</strong> and <strong>@("<MudNumericField>")</strong></MudText>
                    <AdvancedCodeSnippet TComponent="MudDatePicker_Example" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">Lists and Enum values</MudText>
                    <MudText>For lists, the <strong>@("<MudSelect>")</strong> component can be used</MudText>
                    <AdvancedCodeSnippet TComponent="MudSelect_Example" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                    <MudText>However, during the exam, we will specifially need selectable values for enums</MudText>
                    <MudText>For this purpose a modified version of <strong>@("<MudSelect>")</strong> is pre-provided for you, to make your life easier. It will automatically enumerate all enum values as well as the empty value</MudText>
                    <MudText>Everything works the same as with <strong>@("<MudTextField>")</strong> and <strong>@("<MudNumericField>")</strong>, but in the end, you will bind to a nullable Enum value</MudText>
                    <AdvancedCodeSnippet TComponent="MudEnumSelect_Example" RenderOutput="true" SkipHtml="true"></AdvancedCodeSnippet>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
    </MudExpansionPanels>
</SpacedContent>

@code {

}