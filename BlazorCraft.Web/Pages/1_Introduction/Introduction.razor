@page "/introduction"
@using Blazored.LocalStorage
@inject Test1 Test1
@inject ILocalStorageService LocalStorage

<MudContainer Class="d-grid gap-3">
    <MudText Typo="Typo.h4">Bevezetés a Blazor WebAssembly-hez</MudText>
    <MudText>
        Üdvözlünk a BlazorCraft oktatási platformon! Ebben a bevezető részben megismerkedhetsz a Blazor WebAssembly alapjaival, összetevőivel és a technológia működésével.
    </MudText>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanel Tag="whatIsBlazorTag" IsInitiallyExpanded="IsExpanded(whatIsBlazorTag)" IsExpandedChanged="(state) => StoreExpansionState(whatIsBlazorTag,state)">
            <TitleContent>
                <MudText Typo="Typo.h6">Mi az a Blazor?</MudText>
            </TitleContent>
            <ChildContent>
                <MudText>
                    A Blazor egy Microsoft által fejlesztett web keretrendszer, amely lehetővé teszi a C# és WebAssembly használatát a weboldalak és -alkalmazások fejlesztésében.
                </MudText>
                <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
                <MudText Typo="Typo.h6">Példakód:</MudText>
                <CodeSnippet>
                    <h1>Hello world</h1>
                </CodeSnippet>
                <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
                <MudText Typo="Typo.h6">Teszt</MudText>

            </ChildContent>
        </MudExpansionPanel>

        <MudExpansionPanel Tag="webassemblyTabTag" IsInitiallyExpanded="IsExpanded(webassemblyTabTag)" IsExpandedChanged="(state) => StoreExpansionState(webassemblyTabTag, state)">
            <TitleContent>
                <MudText Typo="Typo.h6">WebAssembly</MudText>
            </TitleContent>
            <ChildContent>
                <MudText >
                    A WebAssembly egy bináris instrukciós formátum, amely a modern webböngészőkben gyorsan fut, és lehetővé teszi olyan programok futtatását, amelyek C, C++ vagy más nyelveken íródtak.
                </MudText>
                <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
                <!-- Példakód -->
                <MudText Typo="Typo.h6">Példakód:</MudText>
                <CodeSnippet Language="html">
                    <h1>Hello world</h1>
                </CodeSnippet>
                <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
                <!-- Teszt -->
                <MudText Typo="Typo.h6">Feladat - Hello world</MudText>
                <MudText Typo="Typo.body1">Készítsen egy új komponenst a Components\Introduction mappába HelloWorld.razor néven!</MudText>
                <MudText Typo="Typo.body1">A komponens csak egy h3 típusú html taget tartalmazzon, melynek tartalma: "Hello world"!</MudText>

                <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="true"
                         ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6" HeaderPosition="TabHeaderPosition.Before">
                    <TabPanelHeader>
                        <MudTooltip Text="Futtatás" >
                            <MudIconButton  Class="ml-2 pa-1" Color="Color.Success" Icon="@Icons.Material.Filled.PlayArrow" OnClick="()=>RunTest(context.ID)"/>
                        </MudTooltip>

                        @switch (tests[context.ID].result)
                        {
                            case null:
                                <MudIcon Icon="@Icons.Filled.Warning" Color="@Color.Warning"></MudIcon>
                                break;
                            case true:
                                <MudIcon Icon="@Icons.Filled.Check" Color="@Color.Success"></MudIcon>
                                break;
                            default:
                                <MudIcon Icon="@Icons.Filled.Error" Color="@Color.Error"></MudIcon>
                                break;
                        }
                    </TabPanelHeader>
                    <ChildContent>
                        @foreach (var test in tests)
                        {
                            <MudTabPanel Text="@test.Value.title" ID="@test.Key">
                                @{
                                    <div class="d-flex flex-column">
                                        <MudText Typo="Typo.h6">@test.Value.title</MudText>
                                        <MudText Typo="Typo.body1">@test.Value.description</MudText>
                                        @*<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => { testResult1 = Test1.RunTest(); StateHasChanged(); }">Futtatás</MudButton>*@
                                        <MudText >Eredmény: @renderText(@test.Value.result)</MudText>
                                        <MudText>@test.Value.resultText</MudText>
                                    </div>
                                }
                            </MudTabPanel>
                        }
                    </ChildContent>
                </MudTabs>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudContainer>

@code
{

    Dictionary<object, (Func<(bool,string?)>, bool? result, string? resultText, string title, string description)> tests = new();
    IList<string> expandedPanels = new List<string>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        tests["1"] = (Test1.RunTest, null, resultText:null, title: "1. Teszt, létező komponens", description:"Ez a teszt ellenőrzni, hogy létrehozta-e a komponenst");
        tests["2"] = (Test1.RunTest2, null, resultText: null, title: "2. Teszt, komponens tartalma helyes", description:"Ez a teszt ellenőrzni, hogy valóban azt tartalmazza-e a komponens, ami az elvárt");
        
    }

    protected override async Task OnParametersSetAsync()
    {
        var itemAsync = await LocalStorage.GetItemAsync<Dictionary<string, Dictionary<string, bool>>>("panel_states") ?? new Dictionary<string, Dictionary<string, bool>>();
        var containsKey = itemAsync.ContainsKey(this.GetType().Name);
        if (containsKey)
        {
            foreach (var (key, value) in itemAsync[this.GetType().Name])
            {
                if (value)
                {
                    Console.WriteLine(key);
                    expandedPanels.Add(key);
                }
            }
        }
        StateHasChanged();
        await base.OnParametersSetAsync();
        
    }

    protected override async Task OnInitializedAsync()
    {
        
        await base.OnInitializedAsync();
        
    }

    void RunTest(object ID)
    {
        var valueTuple = tests[ID];
        var item1 = valueTuple.Item1();
        tests[ID] = (valueTuple.Item1, item1.Item1, item1.Item2, valueTuple.title, valueTuple.description);
        Console.WriteLine(item1);
        StateHasChanged();
    }
    
    bool? testResult1 = null;
    bool? testResult2 = null;

    private string renderText(bool? result)
    {
        if (result == null) return "még nem futott";
        return result.Value ? "Siker" : "Elbukott";
    }

    private async Task StoreExpansionState(string tag, bool state)
    {
        var allStates = await LocalStorage.GetItemAsync<Dictionary<string, Dictionary<string, bool>>>("panel_states") ?? new Dictionary<string, Dictionary<string, bool>>();
        var currentPage = this.GetType().Name;
        if (!allStates.ContainsKey(currentPage))
        {
            allStates[currentPage] = new Dictionary<string, bool>();
        }

        allStates[currentPage][tag] = state;
        await LocalStorage.SetItemAsync("panel_states", allStates);
    }
    
    private string webassemblyTabTag = "webAssembly";
    private string whatIsBlazorTag = "whatIsBlazor";


    private bool IsExpanded(string s)
    {
        var isExpanded = expandedPanels.Contains(s);
        Console.WriteLine(isExpanded);
        return isExpanded;
    }
}
