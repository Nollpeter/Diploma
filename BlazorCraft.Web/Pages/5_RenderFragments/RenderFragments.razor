@page "/render-fragments"
@using BlazorCraft.Web.Tests._5_RenderFragments
@using BlazorCraft.Web.Shared.Examples._5_RenderFragments.ExampleUsages
<MudText Typo="Typo.h4">Render Fragments</MudText>
<SpacedContent>
<MudText>
    So far, we've developed components that generate their entire rendered output based on parameters.
    However, components aren't always that straightforward.
    There are situations where we need to create components that combine user-supplied markup with their own rendered content.
</MudText>
<MudText>
    Passing content to a component as an HTML encoded string parameter would be messy and unmanageable.
    For instance:
</MudText>
<CodeSnippet>
    @("""<Collapsible content="Lots of encoded HTML for your entire view here" />""")
</CodeSnippet>
<MudText>
    Furthermore, in addition to the maintenance challenges, the embedded HTML would be limited to basic markup only, excluding the use of Blazor components.
    This approach is essentially impractical and clearly not the recommended approach.
    The correct solution is to employ a <strong>RenderFragment</strong>.
</MudText>
<MudText>In the following sections we will create a List component as an example</MudText>
<MudText>The first parts of the exercise might seem like they make little sense, but don't worry, it will all make sense in the end!</MudText>

<MudExpansionPanels MultiExpansion="true">
<MudExpansionPanelWithStoredState Id="listComponent">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_RenderFragments_Ex1_Basics">
            <MudText Typo="Typo.h6" Class="fw-bold">A simple list component with Title RenderFragment</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>
                First of all, we would like to have a ListComponent. Our List component will have a title and List items. In this example we will use a record type name <strong>TestClass</strong> for list items
            </MudText>
            <MudText>
                As a first approach we can simply define a List property for the ListComponent and a Title string Property, then use a markup like this:
            </MudText>
            <CodeSnippet>
                @("""public record TestClass(int a, int b);""")
            </CodeSnippet>
            <CompanionSnippets TComponent="ListComponent1" TUsage="ListComponent1Usage"/>
            <MudText>
                Technically a List component, but it confronts us instantly with 2 problems:
                <ul>
                    <li>
                        <MudText>
                            What if we want the Title to be a bit bigger, like a <strong>@("<h2>")</strong> tag?
                        </MudText>
                    </li>
                    <li>
                        <MudText>What if we don't want to use <strong>@("<div>")</strong> tags, but instead we want to use <strong>@("<p>")</strong> tags?</MudText>
                    </li>
                </ul>
                In this case we would need to create a completely different List Component. <strong>This cannot work in the long term!</strong>
                Instead let's address the two problems separately
            </MudText>
            <MudText>
                By using a <strong>RenderFragment</strong> property instead of a <strong>string</strong> property, we can externally define what should exactly be in the Title. It can be virtually everything, as long as it is a valid Blazor markup.
            </MudText>
            <CompanionSnippets TComponent="ListComponent2" TUsage="ListComponent2Usage"/>
            <MudText>Now, we can define the title any way that we want.</MudText>
            <MudText>In the next section, we will make the List items customizable as well</MudText>
            <MudDivider/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here will be to create an accordion component, that can be expanded and collapsed with a button (this will be provided)
                You can find the base component for it in <ComponentFileWithPath T="RenderFragments_Ex1"/>
                For the header and the content of the accordion you will need to defined two <strong>RenderFragments</strong>:
            </MudText>
            <ul>
                <li>
                    <MudText Class="fw-bold">HeaderContent</MudText>
                </li>
                <li>
                    <MudText Class="fw-bold">DetailsContent</MudText>
                </li>
            </ul>
            <MudText>There is no kind of animation required, by clicking the button, you just have to toggle the visibility of the <strong>DetailsContent</strong></MudText>
            <MudText><strong>Hint:</strong> Remember from previous exercises how we can create a Click handler for the button!</MudText>
            <TestRunner TTestClass="Test_RenderFragments_Ex1_Basics"
                        ComponentUnderTestParameters="@(new Dictionary<string, object>() { [Test_RenderFragments_Ex1_Basics.TitleFragmentName] = _titleFragment, [Test_RenderFragments_Ex1_Basics.DetailsFragmentName] = (RenderFragment)(builder => { builder.OpenElement(0, "p"); builder.AddContent(1, "Details"); builder.CloseElement(); }) })">
            </TestRunner>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="listComponent_items_templateable">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_RenderFragments_Ex2_RenderFragment_Parameter">
            <MudText Typo="Typo.h6" Class="fw-bold">Passing data to RenderFragments</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>The next step is that we make the List items customizable as well. We may want to use <strong>@("<p>")</strong> tags, instead of <strong>@("div>")</strong></MudText>
            <AdvancedCodeSnippet TComponent="ListComponent3" ShowComponentName="true"/>
            <MudText>
                By using the <strong>@("RenderFragment<TestClass>")</strong>, we can tell the component, the we are going to externally set how the section is going to be rendered <strong>and</strong> what type we want to use in the context of its rendering.
                While defining <strong>RenderFragments</strong> with a generic type parameter in blazor, we will automatically have a <strong>@("@context")</strong> variable
            </MudText>
            <MudText>
                Using our new component will look like this
            </MudText>
            <AdvancedCodeSnippet TComponent="ListComponent3Usage" RenderOutput="true"/>
            <MudText>
                <strong>Note: </strong> the <strong>context</strong> variable is just the default name for the parameter passed to the <strong>RenderFragment</strong>, this can be renamed without any problems.
                This is useful (and necessary) if you have multiple layers of <strong>RenderFragments</strong>, so that name collisions can be avoided
            </MudText>
            <CodeSnippet>
                @("""@* ... *@""" + "\n" +
                  """<ListItemTemplate context="myCustomContextName">""" + "\n" +
                  """    <p>a: @myCustomContextName.a, b: @myCustomContextName.b</p>""" + "\n" +
                  """</ListItemTemplate>""" + "\n" +
                  """@* ... *@""" + "\n")
            </CodeSnippet>

            <MudDivider/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here will be to extend the functionality of the accordion, so that it can accept an Employee in its <strong>DetailsContent</strong> RenderFragment
                For this you will need to define an <strong>Employee</strong> parameter with the name <strong>EmployeeToRender</strong>
            </MudText>
            <MudText>
                How the Details is rendered should be entirely up to the caller component, you just have to pass the parameter and implement rendering the <strong>RenderFragment</strong>
            </MudText>
            <MudText>
                <strong>Although it requires extending a component from the previous exercise, for the separation tests, it will be a separate component, feel free the reuse the code from the previous exercise!</strong>
            </MudText>
            <MudText>
                You can find the base component for it in <ComponentFileWithPath T="RenderFragments_Ex2"/>
            </MudText>
            <TestRunner TTestClass="Test_RenderFragments_Ex2_RenderFragment_Parameter"
                        ComponentUnderTestParameters="@(new Dictionary<string, object>() { [Test_RenderFragments_Ex2_RenderFragment_Parameter.TitleFragmentName] = _titleFragment, [Test_RenderFragments_Ex2_RenderFragment_Parameter.DetailsFragmentName] = (RenderFragment<RenderFragments_Ex2.Employee>)(employee => builder => { builder.OpenElement(0, "p"); builder.AddContent(1, $"Id: {employee.Id}, Name: {employee.FirstName} {employee.LastName}, Position: {employee.Position}"); builder.CloseElement(); }), [Test_RenderFragments_Ex2_RenderFragment_Parameter.EmployeeParamName] = new RenderFragments_Ex2.Employee(1, "Test", "Tiffany", "CEO") })"/>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="listComponent_typeParam">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_RenderFragments_Ex3_Generic">
            <MudText Typo="Typo.h6" Class="fw-bold">Making the component generic to use it with any type</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>
                While it is a significant step forward that we can customize how each item in the list will be rendered,
                the component still binds us to the <strong>TestClass</strong> type, which is a show stopper regarding its reusability and versatility
            </MudText>
            <MudText>
                To address this issue, we can use the <strong>@("@")typeparam</strong> keyword to make the Blazor component generic, just the way we would make any C# type generic.
            </MudText>
            <MudText>The modified component will look like this</MudText>
            <AdvancedCodeSnippet TComponent="ListComponent4<int>" ShowComponentName="true"/>
            <MudText>
                Now if we create a new type to use it with
            </MudText>
            <CodeSnippet>
                @("""public record TestClass2(int c, int d, int e);""")
            </CodeSnippet>
            <MudText>Then we can use the new List component like this:</MudText>
            <AdvancedCodeSnippet TComponent="ListComponent4Usage" RenderOutput="true"/>
            <MudText><strong>Note: </strong> generic constraints works with blazor component <strong>@("@")typeparam</strong> as well, just as C# generic constraints</MudText>
            <CodeSnippet>
                @("""@typeparam T where T: ComponentBase, IComponent""")
            </CodeSnippet>

            <MudDivider/>
            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here will be to extend the functionality of the accordion, so that it can accept any kind of type and render all its fields of an object
                For this you will need to define a generic typed public parameter property (don't forget to attribute it with <strong>[Parameter]</strong>) with the name <strong>ObjectToRender</strong>
                <br/>
                <strong>Note: </strong> Don't forget to add the @("@typeParam") to the component!
                <strong>Note: </strong>In this exercise you won't need the <strong>DetailsContent</strong> renderFragment
            </MudText>
            <MudText>For the exercise, modify the <ComponentFileWithPath T="RenderFragments_Ex3<int>"/> component</MudText>
            <MudText>
                Code for enumerating all the fields of the passed object will be provided for you, you just have to you use it
            </MudText>
            <MudText>
                The fields should be rendered inside a <strong>@("ul")</strong> tag with its items in a <strong>@("li")</strong> tag, with the fields of the passed object in the following format:
                <br/>
                <strong>{field Name}</strong>: <strong>{field Value}</strong>
            </MudText>
            <MudText>
                <strong>Although it requires extending a component from the previous exercise, for the separation tests, it will be a separate component, feel free the reuse the code from the previous exercise!</strong>
            </MudText>
            <MudText>
                You can find the base component for it in <ComponentFileWithPath T="RenderFragments_Ex3<RenderFragments_Ex2.Employee>"/>
            </MudText>
            <TestRunner TTestClass="Test_RenderFragments_Ex3_Generic"
                        ComponentUnderTestParameters="@(new Dictionary<string, object>() { [Test_RenderFragments_Ex3_Generic.TitleFragmentName] = _titleFragment, [Test_RenderFragments_Ex3_Generic.ObjectToRenderParamName] = new RenderFragments_Ex2.Employee(1, "Test", "Tiffany", "CEO") })">
            </TestRunner>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="listComponent_placeholders">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_RenderFragments_Ex4_Table">
            <MudText Typo="Typo.h6" Class="fw-bold">Passing placeholders to RenderFragments</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>
                Our List component is getting very close to perfection, however it is only a list component in the sense of a C# list, where objects (or rows in our context) follow each other.
                In the world of the web, we very often need to encapsulate our list within an html element, like the following:
            </MudText>
            <CodeSnippet>
                @("""<ul>""" + "\n" +
                  """    <li>1</li>""" + "\n" +
                  """    <li>2</li>""" + "\n" +
                  """    <li>3</li>""" + "\n" +
                  """</ul>""" + "\n")
            </CodeSnippet>
            <MudText>
                See how the list items are wrapped in the <strong>@("<ul>")</strong> tag?
            </MudText>
            <MudText>
                As a quick fix, we could of course try and wrap our entire ListComponent within a <strong>@("<ul>")</strong> tag.
            </MudText>
            <AdvancedCodeSnippet TComponent="ListComponent4QuickFix" ShowComponentName="false" RenderOutput="true"/>
            <MudText>By just looking and the rendered html content visually, we could assume it worked, but if we dig into the markup of it, we can see that something is fishy:</MudText>
            <MudText>
                The Title became a list item! This solution won't hold in more complex scenarios, we need to find a way, to wrap <strong>only</strong> the list items around with the <strong>@("<ul>")</strong> tag.
                For this we are going to pass a RenderFragment to a RenderFragment to solve the problem
            </MudText>
            <AdvancedCodeSnippet TComponent="ListComponent5<int>" ShowComponentName="true" RenderOutput="false"/>
            <MudText>
                Another trick that we use here is the @("@:@{}") operator.
                It is in fact two character sequences. First @("@:") tells the Razor parser to treat the following text as Razor mark-up, and then @("@{") is the start of a C# code block - which will naturally end somewhere with a complementary }.
                Ultimately this gives us a chunk of Razor mark-up, which is equivalent to a RenderFragment with C# code inside it that can perform operations such as loops.
            </MudText>
            <MudText>
                And then we can use this modified component the following way to achieve the desired result
            </MudText>
            <AdvancedCodeSnippet TComponent="ListComponent5Usage" RenderOutput="true"/>

            <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
            <MudText>
                Your task here will be to reuse the type @nameof(ListComponent5<int>), so that it can render the values in a table
            </MudText>
            <MudText>
                A valid html table follows the following syntax: (class="table table-dark" will make it look much better, please apply that css class to it)
            </MudText>
            <CodeSnippet>
                @("""<table class="table table-dark"> """ + "\n" +
                  """    <thead> """ + "\n" +
                  """    <tr> """ + "\n" +
                  """        <th>header1</th> """ + "\n" +
                  """        <th>header2</th> """ + "\n" +
                  """        @* ... *@ """ + "\n" +
                  """    </tr> """ + "\n" +
                  """    </thead> """ + "\n" +
                  """    <tbody> """ + "\n" +
                  """    <tr> """ + "\n" +
                  """        <td>value1</td> """ + "\n" +
                  """        <td>value2</td> """ + "\n" +
                  """        @* ... *@ """ + "\n" +
                  """    </tr> """ + "\n" +
                  """    </tbody> """ + "\n" +
                  """</table> """)
            </CodeSnippet>
            <MudText>It will still use integer as its Generic type, so the table will have a single column with the "List items" as its header and its rows will be the integer values inside <strong>@("<td>")</strong> tags</MudText>
            <MudText>The title should be "Items table" enclosed in an @("h2") tag</MudText>
            <MudText>
                You can find the base component for it in <ComponentFileWithPath T="RenderFragments_Ex4"/>
            </MudText>
            <TestRunner TTestClass="Test_RenderFragments_Ex4_Table"
                        ComponentUnderTestParameters="@(new Dictionary<string, object>() { })">
            </TestRunner>
        </SpacedContent>

    </ChildContent>

</MudExpansionPanelWithStoredState>
<MudExpansionPanelWithStoredState Id="render-fragments-final-exercise">
    <TitleContent>
        <PanelHeaderWithTestTracking TTestClass="Test_RenderFragments_ExFinal">
            <MudText Typo="Typo.h6" Class="fw-bold">Lesson final exercise</MudText>
        </PanelHeaderWithTestTracking>
    </TitleContent>
    <ChildContent>
        <SpacedContent>
            <MudText>In this exercise, you will have to modify the component @nameof(RenderFragments_LessonFinal)</MudText>
            <MudText>Your task is to implement a list component for employee data that can be switched with two buttons if a List view is displayed or a Table view is displayed</MudText>
            <MudText>For both kind of views, reuse the @nameof(ListComponent5<RenderFragments_LessonFinal.Employee>) type</MudText>
            <MudText>The actual data will be passed externally, you will need a separate parameter property for it</MudText>
            <MudText>The two buttons will be provided for you</MudText>
            <MudText>The title should be in both cases: <strong>@("<h2>Employees</h2>")</strong></MudText>
            <ul>
                <li>
                    <MudText>
                        For the list view, the list should follow the list layout of previous exercises with the <strong>@("<ul>")</strong> tag and its list items should be enclosed in a
                        <strong>@("<p>")</strong> tag with the employee
                        with the fields of the passed object in the following format:
                        <br/>
                        @("<span>")<strong>{field Name}</strong>: <strong>{field Value}</strong>@("</span>")
                        <br/>
                        <strong>Note:</strong> To simply render string text inside a foreach is a bit tricky, therefore for your convenience they will be wrapped in @("<span>") tags
                    </MudText>
                </li>
                <li>
                    <MudText>
                        For the table view, the table header should contain the employee field names and the table rows should contain the employee data fields
                        <br/>
                        <strong>Please annotate your <strong>@("<table>")</strong> with class="table table-dark" to make it look much better!</strong>
                    </MudText>
                </li>
            </ul>
            <TestRunner TTestClass="Test_RenderFragments_ExFinal"
                        ComponentUnderTestParameters="@(new Dictionary<string, object>() {
                                                          [Test_RenderFragments_ExFinal.EmployeesParamName] = new List<RenderFragments_LessonFinal.Employee>() 
                                                          {
                                                              new(1, "Test", "Tiffany", "CEO"),
                                                              new(2, "Test", "Timothy", "CFO") 
                                                          } 
                                                      })">
            </TestRunner>
        </SpacedContent>
    </ChildContent>
</MudExpansionPanelWithStoredState>
</MudExpansionPanels>
</SpacedContent>


@code {

    private RenderFragment _titleFragment = (RenderFragment)(builder =>
    {
        builder.OpenElement(0, "p");
        builder.AddContent(1, "Title");
        builder.CloseElement();
    });

}