@page "/routing"
@using BlazorCraft.Web.Shared.Components.RenderFragments.ExampleUsages
@using BlazorCraft.Web.Shared.Components.Routing
@using BlazorCraft.Web.Shared.Components.Routing.ExampleUsages
<MudText Typo="Typo.h4">Routing</MudText>
<div class="d-grid gap-3">
    <MudText Typo="Typo.h6" Class="fw-bold">What is routing?</MudText>
    <MudText>
        Routing is what defines with what url you can reach a page. For example, this page can be reached with the <strong>/routing</strong> route.
    </MudText>
    <MudText>
        In most mvc applications these routes are mapped by convention in a <strong>/{controler}/{action}</strong> manner.
        In blazor, there is no such convention, you can instead define pages that can have any routes that you define.
    </MudText>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanelWithStoredState Id="defining-routes">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Defining routes</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        To define the pages route, we need to use the <strong>@("""@page /{route}""")</strong> like this:
                    </MudText>
                    <AdvancedCodeSnippet TComponent="DefiningRoute"/>
                    <MudText>
                        In the background this is going to become a <strong>[RouteAttribute]</strong>
                    </MudText>
                    <CodeSnippet Language="csharp">
                        @("""[global::Microsoft.AspNetCore.Components.RouteAttribute("/resource/subresource")]""" + "\n" +
                          """public partial class DefiningRoute : global::Microsoft.AspNetCore.Components.ComponentBase""")
                    </CodeSnippet>
                    <MudText>This also shows evidents, that blazor pages are essentially blazor components that are decorated with a <strong>[RoutAttribute]</strong></MudText>
                    <MudText>These routes are configured to be automatically looked up by the application's <strong>Router</strong> type. This is configured in the <strong>App.razor</strong> file</MudText>
                    <AdvancedCodeSnippet TComponent="App" RenderOutput="false"/>
                    <MudText>You can also define multiple routes for the pages, in this case, they will be reachable by all of its page routes</MudText>
                    <AdvancedCodeSnippet TComponent="MultipleRoutes" RenderOutput="false"/>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="routeparameters">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Route parameters</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>Pages can have have route parameters, which can then be passed as url parameters from the browser.</MudText>
                    <MudText>
                        They are essentially component parameters, and thus need to be defined the same way with the <strong>[Parameter]</strong> attribute.
                        The only extra thing that we need to do is to add the parameter to the route declaration in curly braces: <strong>@("""@page "/myroute/{parameterName}" """)</strong>
                    </MudText>
                    <AdvancedCodeSnippet TComponent="PageWithRouteParameter" RenderOutput="false"/>
                    <MudText>Then the rendered component will look like this: </MudText>
                    <AdvancedCodeSnippet TComponent="PageWithRouteParameterUsage" RenderOutput="true"></AdvancedCodeSnippet>
                    <MudText>Alternatively you can take a look at it as a page by navigating to the page itself <MudLink Href="/page-with-route-parameter/Mystring" Underline="Underline.Always">here</MudLink></MudText>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="constraining-route-parameters">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Route parameter constraints</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        Routing in Blazor also allows you to add type constraints to your route parameters.
                        Say you have a page for displaying employee details but only for a specific employee.
                        For this, you will want to pass the employee Id to the page so that it can load the resources for that specific employee
                        You can set this up with route constraints.
                    </MudText>
                    <MudText>
                        Just like regular route parameters, constrained parameters also need to be wrapped in curly braces in the route declaration.
                        The only difference is that you add a colon and the type of constraint right after the parameter name.
                        For instance, if you want to ensure that the parameter is an integer, your route might look like this:
                        <strong>@("""@page "/employee/{employeeId:int}" """)</strong>.
                    </MudText>
                    <MudText>
                        So, it's not just about specifying what parameters you'll accept, but also what kind of data those parameters should be.
                        This way, the page only loads if the conditions are met.
                    </MudText>
                    <AdvancedCodeSnippet TComponent="EmployeeDetails" RenderOutput="false"/>
                    <MudText>Then we can use the page like this. Alternatively you can visit the page <MudLink Href="/employee/details/2">here</MudLink></MudText>
                    <AdvancedCodeSnippet TComponent="EmployeeDetailsUsage" RenderOutput="true"/>
                    <MudDivider></MudDivider>
                    <MudText Typo="Typo.h6" Class="fw-bold">Valid constraint types</MudText>
                    <MudTable T="UsableConstraints" Items="_usableConstraints">
                        <HeaderContent>
                            <MudTh>Declaration</MudTh>
                            <MudTh>.NET type</MudTh>
                            <MudTh>Valid examples</MudTh>
                            <MudTh>Invalid examples</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>
                                <strong>@context.Constraint</strong>
                            </MudTd>
                            <MudTd>
                                <strong>@context.dotnettype</strong>
                            </MudTd>
                            <MudTd>
                                <ul>
                                    @foreach (var example in @context.Valid)
                                    {
                                        <li>@example</li>
                                    }
                                </ul>
                            </MudTd>
                            <MudTd>
                                <ul>
                                    @foreach (var example in @context.Invalid)
                                    {
                                        <li>@example</li>
                                    }
                                </ul>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="optional-route-parameters">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Optional route parameters</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        Route parameters can be made optional by placing <Important>?</Important> after them
                    </MudText>
                    <AdvancedCodeSnippet TComponent="EmployeeDetailsOptionalParameter" RenderOutput="false"/>
                    <MudText>This way, if no value is assigned to it, it will get the default value.</MudText>
                    <MudText>
                        <strong>Note: </strong> In the example the default value is explicitly set. If no logic is defined, then the parameter will get the default value of the corresponding type.
                        With int? it is null, if we defined it as int, then the default value assigned would be 0
                    </MudText>
                    <AdvancedCodeSnippet TComponent="EmployeeDetailsWithOptionalParameterUsage" RenderOutput="true" />
                    <MudText>You can also check out the page and play with the route parameter <MudLink Href="employee/details-optional-param">here</MudLink></MudText>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>

    </MudExpansionPanels>
</div>


@code {

    record UsableConstraints(string Constraint, string dotnettype, List<string> Valid, List<String> Invalid);

    List<UsableConstraints> _usableConstraints = new()
    {
        new(":bool", "System.Boolean", new() { "false", "true", "1" }, new() { "Hello" }),
        new(":datetime", "System.DateTime", new() { "2001-01-01", "02-29-2000", }, new() { "29-02-2000", }),
        new(":decimal", "System.Decimal", new() { "2.34", "0.234", }, new() { "2,34", "૦.૨૩૪", }),
        new(":double", "System.Double", new() { "2.34", "0.234", }, new() { "2,34", "૦.૨૩૪", }),
        new(":float", "System.Single", new() { "2.34", "0.234", }, new() { "2,34", "૦.૨૩૪", }),
        new(":guid", "System.Guid", new() { "99303dc9-8c76-42d9-9430-de3ee1ac25d0", }, new() { "{99303dc9-8c76-42d9-9430-de3ee1ac25d0}", }),
        new(":int", "System.Int32", new() { "-1", "42", "299792458", }, new() { "12.34", "૨૩", }),
        new(":long", "System.Int64", new() { "-1", "42", "299792458", }, new() { "12.34", "૨૩", }),
    };

}