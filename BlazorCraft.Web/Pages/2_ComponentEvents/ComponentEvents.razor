@page "/components/component-events"
@using BlazorCraft.Web.Shared._Exercises._2_ComponentEvents
@using BlazorCraft.Web.Shared.Examples._2_ComponentEvents
@using BlazorCraft.Web.Shared.Examples._2_ComponentEvents.ExampleUsages
@using BlazorCraft.Web.Tests._2_ComponentEvents

<MudContainer Class="d-grid gap-3">
    <MudText Typo="Typo.h4">Blazor component events</MudText>
    <MudText>In Blazor, component events are the backbone of interactivity within your web application. Think of them as a structured conversation between various parts of your app. For instance, when a user interacts with a component — say, by clicking a button — this component can broadcast a message indicating that the action has taken place.</MudText>
    <MudText>
        Imagine component events as a system of signals and listeners within your web application. When something noteworthy happens within a component, such as a button click or data update, it can emit a signal or event. Other components that are interested in knowing when this event occurs can act as listeners, ready to respond accordingly.
        This system of signaling and listening allows components to communicate effectively, even if they are not directly connected or aware of each other's existence.
    </MudText>
    
    <MudText>They are beneficial to use, because they make the components more <Important>modular</Important>, <Important>interactive</Important> and <Important>flexible</Important></MudText>
    <MudText>If you wish to go really into the details of the topic, please refer to the official microsoft documentation <MudLink Href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling?view=aspnetcore-7.0">event handling</MudLink></MudText>
    
    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanelWithStoredState Id="components_eventBinding">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Event Binding</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        <strong>Event binding</strong> is one of the foundational elements for creating interactive user interfaces in Blazor applications.
                        It provides us the ability to <Important>bind HTML events directly to C# methods</Important> in your component class.
                        This can be achieved via using the <strong>@("@onclick")</strong>, <strong>@("@onkeydown")</strong>, etc. attributes in our razor markup
                        We can even pass arguments to the C# method, like event arguments or custom values.
                    </MudText>
                    <MudText>
                        Event binding in Blazor is not just a syntactic sugar; it also plays well with Blazor's rendering system.
                        When an event is triggered and the corresponding C# method is executed, Blazor efficiently re-renders only the component parts that have changed.
                        This makes updates faster and minimizes the performance overhead.
                    </MudText>
                    <MudText>
                        Note that this kind of event binding works on both HTML elements and in blazor components.
                        For HTML elements, you can use the standard HTML events along with the <strong>@("@")</strong> sign to tell Blazor, that the event handler will be a C# method.
                    </MudText>
                    <MudText>
                        Event handlers methods will be standard C# methods, they can be synchronous and asynchronous as well.
                    </MudText>
                    <CodeSnippetWithOutput TComponent="EventBindingExample" RenderOutput="true"></CodeSnippetWithOutput>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="eventCallBack">
            <TitleContent>
                <PanelHeaderWithTestTracking TTestClass="Test_ComponentEvents_Ex1_EventCallBack">
                    <MudText Typo="Typo.h6" Class="fw-bold">EventCallBack and EventCallback@("<T>")</MudText>
                </PanelHeaderWithTestTracking>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        The <strong>EventCallback@("<T>")</strong> class is a special Blazor class that can be used to
                        <ul>
                            <li>
                                <MudText>Raise events from a component that can be handled <strong>outside of the component</strong></MudText>
                            </li>
                            <li>
                                <MudText>Pass data for the event handler</MudText>
                            </li>
                            <li>
                                <MudText>Consumed via direct blazor markup</MudText>
                            </li>
                        </ul>
                    </MudText>
                    <MudText>
                        <strong>Note: </strong> If you are familiar with native C# events, <strong>EventCallbacks</strong> are very similar to them, however <strong>EventCallbacks</strong> are:
                        <ul>
                            <li><MudText><Important>Single cast</Important>, meaning you can only assign a single handler to them</MudText></li>
                            <li><MudText><Important>Structs</Important>, therefore there is no need for null checking for them, validating if they have a handler registered is done internally</MudText></li>
                            <li><MudText>A handler can be assigned to them <strong>directly</strong> from the blazor markup</MudText></li>
                        </ul>
                    </MudText>
                    <MudText>
                        Once declare a public property of type <strong>EventCallback@("<T>")</strong> and annotate with the <strong>[Parameter]</strong> attribute, we can specify for consuming components in Razor mark-up which method to call when the event is triggered.
                    </MudText>
                    <MudText>
                        <strong>EventCallback</strong> and <strong>EventCallback@("<T>")</strong> will serve us a crucial role in component architecture, particularly in achieving loosely-coupled designs.
                        They provide a way for child components to notify parent components about something that needs their attention.
                        For example, if you have a list component with a delete button for each item, clicking the delete button could trigger an <strong>EventCallback</strong> that the parent component listens to in order to remove the item from the database.
                    </MudText>
                    <MudText>
                        The <strong>EventCallback@("<T>")</strong> type can also pass data to the consumer component.
                        In this case, declaring the handler in the markup will also have a parameter that can be used in the handler. (See code example below)

                    </MudText>
                    <MudText>
                        The second crucial aspect of EventCallback is its re-rendering behavior.
                        When an EventCallback is triggered, it not only invokes the method it is bound to but also requests a UI refresh of the component that owns the method.
                        This ensures that the parent component's UI is updated based on any state changes that might have occurred as a result of the child component's events.
                    </MudText>
                    <MudText>
                        Raising the event can be achieved via the <strong>InvokeAsync</strong> method.
                        <ul>
                            <li>
                                <MudText>For <strong>EventCallback</strong> this will be a parameterless method</MudText>
                            </li>
                            <li>
                                <MudText>
                                    For <strong>EventCallback@("<T>")</strong> this will be a method with a parameter of type <strong>T</strong>
                                    <br/>
                                    For example, for a  <strong>EventCallback@("<int>")</strong> it will be a method with an <strong>int</strong> parameter
                                </MudText>
                            </li>
                        </ul>
                    </MudText>
                    <CompanionSnippets TComponent="EventCallBackExample" TUsage="EventCallBackExampleUsage"/> 
                    <MudDivider/>
                    <MudText Class="fw-bold" Typo="Typo.h6">Exercise</MudText>
                    <MudText>Your task here is to create a grid component, that for each item has a delete button, and notifies its consumer component that a grid item was deleted</MudText>
                    <MudText>The actual deletion will be handled externally in the next exercise</MudText>
                    <MudText>In this execrise you will only have to modify the <ComponentFileWithPath T="ComponentEvents_Ex1_EventCallBack"/> component</MudText>
                    <MudText>
                        For the component, you will need
                        <ul>
                            <li>
                                <MudText>A <strong>List@("<int")</strong> <Important>public property</Important> annotated with the <strong>[Parameter]</strong> attribute with the name <strong>@Test_ComponentEvents_Ex1_EventCallBack.EmployeesParameterName</strong></MudText>
                            </li>
                            <li>
                                <MudText>
                                    An <strong>EventCallBack@("<Employee>")</strong> public property annotated with the <strong>[Parameter]</strong> attribute (The <strong>Employee</strong> type will be provided, you only need to use it)
                                    with the name <strong>@Test_ComponentEvents_Ex1_EventCallBack.EventCallBackPropertyName</strong>
                                </MudText>
                            </li>
                        </ul>
                    </MudText>
                    <MudText>You only have to render grid rows, you will be guided by the table header, how a row should look like</MudText>
                    <MudText><strong>Note:</strong> valid table rows look like this inside the <strong>@("<tbody>")</strong> tag</MudText>
                    <CodeSnippet>
                        @("<tr> \n" +
                          "    <td>...</td> \n" +
                          "    <td>...</td> \n" +
                          "    ... \n" +
                          "</tr> \n")
                    </CodeSnippet>
                    @{
                        var employees = new List<ComponentEvents_Ex1_EventCallBack.Employee>() { new(1, "employee 1"), new(2, "employee 2") };
                        var eventCallback = EventCallback.Factory.Create<ComponentEvents_Ex1_EventCallBack.Employee>(employees, employee => { employees.Remove(employee); });
                    }
                    <TestRunner TTestClass="Test_ComponentEvents_Ex1_EventCallBack"
                                ComponentUnderTestParameters="@(new Dictionary<string, object>() { 
                                                                  [Test_ComponentEvents_Ex1_EventCallBack.EmployeesParameterName] = employees, 
                                                                  [Test_ComponentEvents_Ex1_EventCallBack.EventCallBackPropertyName] = eventCallback})" />
                        
                    }
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="components_ex-final">
            <TitleContent>
                <PanelHeaderWithTestTracking TTestClass="Test_Components_Events_ExLessonFinal">
                    <MudText Typo="Typo.h6" Class="fw-bold">Lesson final exercise</MudText>
                </PanelHeaderWithTestTracking>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        Your task is to modify the pre-created component: <ComponentFileWithPath T="ComponentEvents_ExLessonFinal"/>, so that it behaves accordingly:
                        <ul>
                            <li>
                                <MudText>
                                    The component should handle the @Test_ComponentEvents_Ex1_EventCallBack.EventCallBackPropertyName event,
                                    so that the list items are deleted from the @Test_Components_Events_ExLessonFinal.EmployeesParameterName list
                                </MudText>
                            </li>
                            <li>
                                <MudText>
                                    The component should also list the already deleted employees, you will find the instructions inside the component how you need to render them
                                </MudText>
                            </li>
                        </ul>
                    </MudText>
                    <MudText>You can see that you have some code already provided for you, you don't need to touch them, also, please don't!</MudText>
                    <MudText>The component also guides you with comments where you need to put your code, please follow these instructions</MudText>
                    <TestRunner TTestClass="Test_Components_Events_ExLessonFinal"
                                ComponentUnderTestParameters=
                                "@(new Dictionary<string, object>(){ [Test_Components_Events_ExLessonFinal.EmployeesParameterName]= 
                                     new List<ComponentEvents_Ex1_EventCallBack.Employee>(){ new (1, "employee 1"), new(2, "employee 2")}})"
                                ></TestRunner>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
    </MudExpansionPanels>
</MudContainer>


@code {

}