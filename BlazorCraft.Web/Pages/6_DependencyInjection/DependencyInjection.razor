@page "/dependency-injection"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using BlazorCraft.Web.DI
@using BlazorCraft.Web.Infrastructure
@using BlazorCraft.Web.Pages._3_Components
@using BlazorCraft.Web.Pages._4_RenderFragments
@using BlazorCraft.Web.Shared._Exercises._6_DependencyInjection
@using BlazorCraft.Web.Shared._Exercises.DependencyInjection
@using BlazorCraft.Web.Shared.Examples._6_DependencyInjection
@using BlazorCraft.Web.Shared.Examples._7_DependencyInjection
@using BlazorCraft.Web.Tests.DependencyInjection
<MudText Typo="Typo.h4">Dependency Injection</MudText>
<SpacedContent>
    @*<MudText Typo="Typo.h6" Class="fw-bold">What is dependency injection?</MudText>*@
    <MudText>
        While objects in C# can be Created with the <strong>new</strong> keyword, and can be created manually,
        most of the time for complex business logic objects, we do not want to do this manually, but rather we want the framework
        to handle the creation of the complex objects and have it provide it to us.
    </MudText>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanelWithStoredState Id="di-registration">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Registering objects</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        To register an object, we are going to need an instance of an <strong>IServiceCollection</strong> object
                        This is provided for us by the Blazor framework, inside the <strong>Program.cs</strong> via the
                        <strong>@nameof(WebAssemblyHostBuilder)::@nameof(WebAssemblyHostBuilder.Services)}</strong>
                        We can set up registration of objects directly inside the <strong>Program.cs</strong>, but typically we create
                        extension methods for the <strong>IServiceCollection</strong> type per business domain, and do the registration
                        in extension methods, which are called from the <strong>Program.cs</strong>
                    </MudText>
                    <MudText>
                        For instance, for this application, this is done inside the
                        <strong>@nameof(ServiceCollectionExtensions)@(".")@nameof(ServiceCollectionExtensions.AddBlazorCraftServices)</strong>
                        extension method:
                    </MudText>
                    <CodeSnippet Language="csharp">
                        @("namespace BlazorCraft.Web.DI;\n" +
                          "\n" +
                          "public static class ServiceCollectionExtensions\n" +
                          "{\n" +
                          "    public static void AddBlazorCraftServices(this IServiceCollection serviceCollection)\n" +
                          "    {\n" +
                          "        serviceCollection.AddScoped<ITestRunnerService, TestRunnerService>();\n" +
                          "        serviceCollection.AddScoped<IPanelStateService, PanelStateService>();\n" +
                          "    }\n" +
                          "}\n")
                    </CodeSnippet>
                    <MudText>
                        We register two services here, by their interface. So whenever we request an object of type <strong>@nameof(ITestRunnerService)</strong>,
                        an object of type <strong>@nameof(TestRunnerService)</strong> will be provided. Whichever dependencies the type <strong>@nameof(TestRunnerService)</strong>
                        has will be automatically provided by the framework as well.
                    </MudText>
                    <MudDivider/>

                    <MudText Class="fw-bold" Typo="Typo.h6">Lifetime of injected services</MudText>
                    <MudText>
                        You may have noticed, that the method used on <strong>IServiceCollection</strong> is quite a particular one: <strong>AddScoped</strong>
                        There are 3 main lifetimes of injected services in .NET:

                    </MudText>
                    <MudSimpleTable>
                        <thead>
                        <tr>
                            <th class="fw-bold">Type</th>
                            <th class="fw-bold">Extension method</th>
                            <th class="fw-bold">Behaviour</th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr>
                            <td Class="fw-bold">Transient</td>
                            <td>AddTransient</td>
                            <td>Whenever a transient dependency is requested, a new instance will be created</td>
                        </tr>
                        <tr>
                            <td Class="fw-bold">Scoped</td>
                            <td>AddScoped</td>
                            <td>For scoped dependencies the same instance will be used within the request.</td>
                        </tr>
                        <tr>
                            <td Class="fw-bold">Singleton</td>
                            <td>AddSingleton</td>
                            <td>
                                For singleton dependencies the same instance will be used for the entire lifecycle of the application.
                                <strong>Note: </strong> In blazor webassembly, a single request is made when the application opens,
                                all navigation is done on client side, therefore all scoped dependencies will behave as singleton dependencies.
                            </td>
                        </tr>
                        </tbody>
                    </MudSimpleTable>
                    <MudDivider/>
                    <MudText>
                        Let's create two example services for demonstrative purposes that have the same implementation,
                        but their behaviour will still be different based on their lifetime
                    </MudText>
                    <CsharpSnippet T="@typeof(IExampleTransientService)"/>
                    <CsharpSnippet T="@typeof(IExampleScopedService)"/>
                    <MudText>Let's implement the service registration for them</MudText>
                    <CsharpSnippet T="@typeof(ExampleServiceRegistration)"/>
                    <MudText>And let's call the registration method in Program.cs</MudText>
                    <CodeSnippet Language="csharp">
                        @("// ...\n"+
                        "builder.Services.AddExampleServices();\n"+
                        "// ...\n")
                    </CodeSnippet>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>

        <MudExpansionPanelWithStoredState Id="di-blazor">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Dependency injection for blazor components</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>For blazor objects, dependency injection is done via property injection</MudText>
                    <MudText>There are two ways to achieve this:</MudText>
                    <ul>
                        <li>
                            <MudText>using the <strong>@("@inject")</strong> keyword with the Property name.</MudText>
                            <AdvancedCodeSnippet TComponent="BlazorDependencyInjectionInjectKeywordExample" RenderOutput="true"/>
                            <MudText>This way, an auto-property with the name specified after the @("@inject") keyword will be created for you</MudText>
                            <MudText><strong>Note: </strong> this way, the automatically created property will be protected, instead of public!</MudText>
                        </li>
                        <li class="pt-2">
                            <MudText>using the <strong>[Inject]</strong> attribute</MudText>
                            <AdvancedCodeSnippet TComponent="BlazorDependencyInjectionInjectParameterExample" RenderOutput="true"></AdvancedCodeSnippet>
                            <MudText>This way, you have the opportunity to make the property public or to customize the getter and setter for the property</MudText>
                        </li>
                    </ul>
                    <MudText>
                        We can also see by the example the difference between a Transient dependency and a scoped dependency.
                    </MudText>
                    <MudText>
                        Since for the scoped dependency, no new object is created for separate injections, it will still show the same value that we set in the constructor
                    </MudText>
                    <MudText>It is entirely up to you which one you use for the exercises, the tests will accept both of them, use the one that you prefer</MudText>
                    <MudText>
                        <strong>Note: </strong> If you create a separate code behind .cs file for you blazor object, you can only use the
                        <strong>[Inject]</strong> parameter for properties defined in the .cs file
                    </MudText>
                    <MudText>
                        <strong>Note: </strong> If the the requested service isn't registered, we will receive an <strong>InvalidOperationException</strong>
                    </MudText>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="di-poco">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Dependency injection for plain C# types</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        For plain c# objects, dependency injection is done via constructor injection.
                        This means that whichever objects we require will be added as a constructor parameter, with which we can initialize a
                        field inside our object.
                    </MudText>
                    <CodeSnippet Language="csharp">
                        @("public class MyClass\n"+
                        "{\n"+
                        "   private readonly IExampleTransientService _service;\n"+
                        "\n"+
                        "   public MyClass(IExampleTransientService service)\n"+
                        "   {\n"+
                        "   _service = service;\n"+
                        "   }\n"+
                        "}\n")
                    </CodeSnippet>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="di-exercise">
            <TitleContent>
                <PanelHeaderWithTestTracking TTestClass="Test_DependencyInjection_LessonFinal">
                    <MudText Typo="Typo.h6" Class="fw-bold">Lesson final exercise</MudText>
                </PanelHeaderWithTestTracking>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        Your exercise here will be to Reuse the List component that you created in the Final exercise for <MudPageLink PageType="typeof(RenderFragments)">Render fragments</MudPageLink>:
                        <strong>@nameof(RenderFragments_LessonFinal)</strong>
                    </MudText>
                    <MudText>
                        However, this time, we will use dependency injection to obtain an instance of @nameof(IEmployeeService)
                        and then bind the List of employees returned by @nameof(IEmployeeService) to the list component and show that as
                        a list or table view
                    </MudText>
                    <MudText>
                        For the exercise, you will need to modify the component <ComponentFileWithPath T="DependencyInjection_Ex_LessonFinal"/> and also
                        you will have to register @nameof(IEmployeeService) in
                        @(nameof(DependencyInjection_EmployeeServiceRegistration)).@nameof(DependencyInjection_EmployeeServiceRegistration.AddEmployeeService)
                    </MudText>
                    <MudText>
                        Every further instruction for you is provided in <ComponentFileWithPath T="DependencyInjection_Ex_LessonFinal"/>
                    </MudText>
                    <MudText>Good luck!</MudText>
                    <MudExpansionPanel>
                        <TitleContent>Hint, if you are stuck</TitleContent>
                        <ChildContent>
                            <MudText>
                                While sync methods (any method that does not return a task and does not have the async keyword) can be called inside the razor markup,
                                This is not the case for async methods, since they are typically long running operations. Therefore, you will need to store its result in a field,
                                which needs to be initiated in a lifecycle method.
                            </MudText>
                            <MudText>
                                We have covered a technique, to mitigate this issue in the <MudPageLink  PageType="typeof(ComponentLifecycle)">Component lifecycle</MudPageLink> chapter
                            </MudText>
                        </ChildContent>
                    </MudExpansionPanel>
                    <TestRunner TTestClass="Test_DependencyInjection_LessonFinal"
                                ComponentUnderTestParameters="@(new Dictionary<string, object>() { })">
                    </TestRunner>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
    </MudExpansionPanels>
</SpacedContent>

@code {

}