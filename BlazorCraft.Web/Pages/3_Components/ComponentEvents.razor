@page "/components/component-events"

<MudContainer Class="d-grid gap-3">
    <MudText Typo="Typo.h4">Blazor component events</MudText>
    <MudText>Component events in Blazor are a fundamental aspect of building interactive web applications. They provide a way for different parts of your application to communicate and respond to specific actions or changes, making it easier to create dynamic and responsive user interfaces.</MudText>
    <MudText>Imagine component events as a system of signals and listeners within your web application. When something noteworthy happens within a component, such as a button click or data update, it can emit a signal or event. Other components that are interested in knowing when this event occurs can act as listeners, ready to respond accordingly. This system of signaling and listening allows components to communicate effectively, even if they are not directly connected or aware of each other's existence.</MudText>
    <MudText>They are beneficial to use, because they make the components more <Important>modular</Important>, <Important>interactive</Important> and <Important>flexible</Important></MudText>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanelWithStoredState Id="components_eventBinding">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Event Binding</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        Event binding is one of the foundational elements for creating interactive user interfaces in Blazor applications.
                        It provides the mechanism through which HTML events can be tied directly to C# methods in your component class.
                        This is done using a simple yet powerful syntax involving Razor directives like @("@onclick"), @("@onkeydown"), etc.
                        You can even pass arguments to the C# method, like event arguments or custom values.
                        The integration of HTML and C# through event binding streamlines development, obviating the need for developers to juggle between JavaScript and C#.
                    </MudText>
                    <MudText>
                        Event binding in Blazor is not just a syntactic sugar; it also plays well with Blazor's rendering system.
                        When an event is triggered and the corresponding C# method is executed, Blazor efficiently re-renders only the component parts that have changed.
                        This makes updates faster and minimizes the performance overhead.
                    </MudText>
                    <MudText>
                        It's worth noting that event binding is possible for both standard DOM events and custom events defined in your Blazor components.
                        This makes it highly versatile and suitable for a broad range of application requirements.
                        For example, you can easily create a custom component with its own specific events, like OnCompleted, and consumers of that component can handle that event as they would any standard HTML event.
                    </MudText>
                </div>
                @*TODO Példakód, feladat*@
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="eventCallBack">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">EventCallback@("<T>")</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        The <strong>EventCallback@("<T>")</strong> class is a special Blazor class that can be exposed as a Parameter so that components can easily notify consumers when something of interest has occurred.
                    </MudText>
                    <MudText>
                        Once a public property of type <strong>EventCallback@("<T>")</strong> has been declared and decorated with the [Parameter] attribute, consuming components can specify in Razor mark-up which method to call when the event is triggered.
                    </MudText>
                    <MudText>
                        EventCallback and <strong>EventCallback@("<T>")</strong> are special types that serve a crucial role in component architecture, particularly in achieving loosely-coupled designs.
                        They provide a way for child components to notify parent components about something that needs their attention.
                        For example, if you have a list component with a delete button for each item, clicking the delete button could trigger an EventCallback that the parent component listens to in order to remove the item from the database.
                    </MudText>
                    <MudText>
                        The second crucial aspect of EventCallback is its re-rendering behavior.
                        When an EventCallback is triggered, it not only invokes the method it is bound to but also requests a UI refresh of the component that owns the method.
                        This ensures that the parent component's UI is updated based on any state changes that might have occurred as a result of the child component's events.
                    </MudText>
                    <MudText>
                        Thirdly, <strong>EventCallback@("<T>")</strong> allows for the passing of data back to the parent component.
                        This is particularly useful in scenarios where the child component performs some form of computation or selection and needs to inform the parent component about it.
                        For example, a DatePicker component could use EventCallback@("<DateTime>") to send the selected date back to the parent.
                        This provides a way for components to be not only reusable but also informative, making complex UI workflows simpler to manage.
                    </MudText>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="eventModifiers">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Event modifiers</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        Event modifiers in Blazor help to simplify the event-handling mechanism by providing ways to modify the standard behavior of DOM events.
                        For instance, you can use <strong>@("@onmousemove:preventDefault")</strong> to prevent the default behavior of a mouse move event.
                        This feature is particularly useful when you want to control the behavior of browser events without writing additional JavaScript code.
                    </MudText>
                    <MudText>
                        Another commonly used modifier is stopPropagation, which prevents the event from bubbling up the DOM tree.
                        By using these modifiers, you can create more maintainable and readable code, reducing the need for inline JavaScript or additional methods to handle simple event modifications.
                    </MudText>
                    <MudText>
                        It's crucial to understand when and how to use these modifiers, as they can influence not just the component they are declared in but also potentially impact parent or child components.
                        Incorrect use can lead to unexpected behavior, making debugging more challenging.
                    </MudText>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="customEvents">
            <TitleContent>
                <MudText Typo="Typo.h5" Class="fw-bold">Custom events</MudText>
            </TitleContent>
            <ChildContent>
                <div class="d-grid gap-3">
                    <MudText>
                        Custom events allow you to define and emit events that are specific to your application's requirements.
                        In Blazor, you can use <strong>EventCallback</strong> and <strong>@("EventCallback<T>")</strong> to create custom events that can be bound to parent components, allowing for a robust data flow mechanism between components.
                    </MudText>
                    <MudText>
                        These custom events can carry payloads, enabling richer interaction patterns.
                        For example, you might emit a custom event from a child component to its parent, carrying some data that the parent then uses to modify its own state or even trigger additional logic.
                    </MudText>
                    <MudText>
                        Custom events offer a clean and type-safe way to communicate between components.
                        It encourages encapsulation and makes it easier to reason about your application's behavior.
                        However, care must be taken to manage these custom events properly, to avoid leaks and ensure that components are not tightly coupled.
                    </MudText>
                </div>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
    </MudExpansionPanels>
</MudContainer>


@code {

}