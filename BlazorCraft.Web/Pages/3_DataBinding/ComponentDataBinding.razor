@page "/components/data-binding"
@using BlazorCraft.Web.Shared.Examples._3_DataBinding
@using BlazorCraft.Web.Shared.Examples._3_DataBinding.ExampleUsages

<SpacedContent>
    <MudText Typo="Typo.h4">Component Data binding</MudText>
    <MudText>
        With data binding, we can make the connection between our C# code and HTML (or blazor component) markup.
        <br/>
        We can pass data back and forth, making it an integral part of creating dynamic and interactive web applications.
        With data binding, we can easily display C# variables in HTML or capture user input to manipulate in our C# code.
    </MudText>
    <MudText>
        It eliminates the need for complicated JavaScript to synchronize data between HTML and C# code, providing a more direct and natural method of crafting web applications
    </MudText>
    <MudText>If you wish to go really into the details of the topic, please refer to the official microsoft documentation <MudLink Href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-7.0">data-binding</MudLink></MudText>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanelWithStoredState Id="one-way-data-binding">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">One-Way Data Binding in HTML</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        One-way data binding is the simplest form of data binding in Blazor.
                        It allows us to take a C# variable or expression and display it within the razor markup.
                        The use of the <strong>@("@")</strong> symbol in the markup enables this.
                        We have already done this in previous lessons, so you should be already familiar with it
                    </MudText>
                    <MudText>
                        One-way data binding is particularly useful when we want to display data that changes over time without requiring any user interaction.
                        For example, we might fetch data from an API and update a variable in our C# code: using one-way data binding, the updated data will automatically reflect in the UI.
                    </MudText>
                    <MudText>
                        While one-way data binding is powerful, it's a bit limited in that it only allows data to flow in one direction: from the C# code to the razor markup
                        For more advanced use-cases, two-way data binding is required, which will be discussed in the next section
                    </MudText>
                    <CodeSnippetWithOutput TComponent="ControlFlowStatements" RenderOutput="true"/>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="two-way-data-binding">
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Two-way Data Binding in HTML</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        With two-way data binding, we can take binding the the next level by automatically synchronizing data back and forth between HTML and C#, or between blazor components.
                        To use it, we will need the <strong>@("@bind")</strong> keyword.
                    </MudText>
                    <MudText>
                        It's power shines primarily in forms, where data changes by user interaction, and we can skip the tedious synchronization with it.
                    </MudText>
                    <MudText>
                        Let's see an example how we can bind an employee's name to an input field, and whenever we change something in the field, will be automatically reflected
                    </MudText>
                    <CodeSnippetWithOutput TComponent="TwoWayDataBindingExample" RenderOutput="true"/>
                    <MudText>
                        Feel free to play around with the component, we can see that data coming from blazor (Click on the button to trigger it) is reflected
                        and vice versa, once we type in the inbox, it will be reflected in the blazor code automatically.
                    </MudText>
                    <MudText><strong>Note: </strong> Notice the <strong>@("@")bind-value:event="oninput"</strong>. This is required for the change to be instantaneous rather than only taking effect after the input loses focus</MudText>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
        <MudExpansionPanelWithStoredState Id="two-way-data-binding-for-components">
            <TitleContent>
                    <MudText Typo="Typo.h6" Class="fw-bold">One-way and Two-way binding for components</MudText>
            </TitleContent>
            <ChildContent>
                <SpacedContent>
                    <MudText>
                        To use one way data-binding for blazor components in the direction of <strong>Parent -> Child</strong>, we can simply use public properties annotated with the <strong>[Parameter]</strong> attribute and bind them in our markup. (we covered this in the previous chapters)
                        <br/>
                        Whenever the value of the bound value updates inside the <strong>parent</strong> component, it will be automatically reflected in the <strong>child</strong> component
                    </MudText>
                    <MudDivider/>
                    <MudText>
                        To use two-way data-binding for blazor components, we need to do things a little bit differently, but it is also very easy.
                    </MudText>
                    <MudText>
                        Since we don't have the events like <strong>onchange</strong> or <strong>oninput</strong> by default in Blazor components, we need to do this manually
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">Matching change event by convention</MudText>
                    <MudText>
                        To make two-way data binding happen, we are going to need two things:
                        <ul>
                            <li>
                                <MudText>A <Important>public property</Important> annotated with the <strong>[Parameter]</strong> attribute (so far it is the same as one-way data binding)</MudText>
                            </li>
                            <li>
                                <MudText>A <Important>public property</Important> of type <strong>EventCallback</strong> with the name <Important>{PropertyName}Changed</Important> and with a generic argument of the property and also annotated with the <strong>[Parameter]</strong> attribute</MudText>
                            </li>
                        </ul>
                    </MudText>
                    <MudText>We need to use the syntax @("@")bind-{PropertyName} with the consumer component and we are done, data changes for the property will be automatically synchronized both-ways</MudText>
                    <MudText Color="Color.Error">
                        <Important>Attention:</Important> make note of the <strong>@("@")</strong> sign before writing <strong>bind-{PropertyName}</strong>.
                        <br/>
                        This is very important, otherwise being omitted, the framework will try to do one-way data-binding for a property called <strong>bind-{PropertyName}</strong> which it will naturally not find
                    </MudText>
                    <CompanionSnippets TComponent="TwoWayDataBinding_Components" TUsage="TwoWayDataBinding_Components_Usage"/>
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">Binding property values</MudText>
                    <MudText>In the real world, we rarely have a simple int variable, rather, we have complex objects that have properties of simple types, like an int</MudText>
                    <MudText>We can easily bind those properties as well</MudText>
                    <CodeSnippetWithOutput TComponent="TwoWayDataBinding_Components_ComplexObjectProperty_Usage" RenderOutput="true"></CodeSnippetWithOutput>
                </SpacedContent>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
    </MudExpansionPanels>
</SpacedContent>
