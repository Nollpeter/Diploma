@page "/exam"
@using BlazorCraft.Web.Shared._Exercises.Exam
@using BlazorCraft.Web.Tests.Exam
@inject IExamEmployeeService EmployeeService
<MudText Typo="Typo.h4">Exam exercise</MudText>
<SpacedContent>
    <MudText>
        Congratulations for making it to the final part of this application!
    </MudText>
    <MudText>
        In this chapter, you will learn nothing new, but put together everything you have learned so far.
    </MudText>
    <MudText>
        In this exam, you will create a minified stripped down employee management page, where employees can be
        <ul>
            <li>Listed in a grid</li>
            <li>Created</li>
            <li>Edited</li>
            <li>Shown details for in a separate panel</li>
            <li>Deleted</li>
        </ul>
    </MudText>
    <MudText>The layout will be predefined for you, as it is out-of-scope for this application to teach the usage of CSS libraries and/or CSS itself</MudText>
    <MudText>The layout will often use components of MudBlazor, but don't worry, everything will be explained how they can be used, also the general look of the component will be much better this way</MudText>

    <MudExpansionPanels MultiExpansion="true">
        <MudExpansionPanelWithStoredState Id="exam-exercise">
            @*<PanelHeaderWithTestTracking TTestClass="null">*@
            <TitleContent>
                <MudText Typo="Typo.h6" Class="fw-bold">Exam exercise</MudText>
            </TitleContent>
            @*</PanelHeaderWithTestTracking>*@
            <ChildContent>
                <MudExpansionPanelWithStoredState Id="employee-form">
                    <TitleContent>
                        <PanelHeaderWithTestTracking TTestClass="Test_Exam_EmployeeForm">Employee form</PanelHeaderWithTestTracking>
                    </TitleContent>
                    <ChildContent>
                        <TestRunner TTestClass="Test_Exam_EmployeeForm"
                                    ComponentUnderTestParameters="@(new Dictionary<string, object>() { [nameof(EmployeeForm.Employee)] = _employee, [nameof(EmployeeForm.IsEditMode)] = true })">
                        </TestRunner>
                    </ChildContent>
                </MudExpansionPanelWithStoredState>
                <MudExpansionPanelWithStoredState Id="employee-create">
                    <TitleContent>
                        <PanelHeaderWithTestTracking TTestClass="Test_Exam_EmployeeCreate">Employee create</PanelHeaderWithTestTracking>
                    </TitleContent>
                    <ChildContent>
                        <TestRunner TTestClass="Test_Exam_EmployeeCreate"
                                    ComponentUnderTestParameters="@(new Dictionary<string, object>(){[nameof(ExamEmployeeCreate.Employee)] = new ExamEmployee()})"></TestRunner>
                    </ChildContent>
                </MudExpansionPanelWithStoredState>
                <MudExpansionPanelWithStoredState Id="employee-details">
                    <TitleContent>
                        <PanelHeaderWithTestTracking TTestClass="Test_Exam_EmployeeDetails">Employee details</PanelHeaderWithTestTracking>
                    </TitleContent>
                    <ChildContent>
                        <TestRunner TTestClass="Test_Exam_EmployeeDetails"
                                    ComponentUnderTestParameters="@(new Dictionary<string, object>(){[nameof(ExamEmployeeDetails.EmployeeId)] = 2})"></TestRunner>
                    </ChildContent>
                </MudExpansionPanelWithStoredState>
                <MudExpansionPanelWithStoredState Id="putting-it-together">
                    <TitleContent>
                        <PanelHeaderWithTestTracking TTestClass="Test_Exam_PuttingItTogether">Putting it all together</PanelHeaderWithTestTracking>
                    </TitleContent>
                    <ChildContent>
                        <TestRunner TTestClass="Test_Exam_PuttingItTogether" ComponentUnderTestParameters="new Dictionary<string, object>()"></TestRunner>
                    </ChildContent>
                </MudExpansionPanelWithStoredState>
            </ChildContent>
        </MudExpansionPanelWithStoredState>
    </MudExpansionPanels>
</SpacedContent>

@code {
    private ExamEmployee _employee;
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        _employee = await EmployeeService.GetEmployee(2); 
    }

}