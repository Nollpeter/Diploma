@using BlazorCraft.Web.Infrastructure
@using System.Reflection
@inherits LayoutComponentBase
@inject ITestRunnerService TestRunnerService
@inject NavigationManager NavigationManager
@inject INavigationService NavigationService

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Class="mx-2" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudButton Class="mx-2" OnClick="TestRunnerService.RunAll" Color="Color.Secondary" Variant="Variant.Filled">Run all</MudButton>
        <MudButton Class="mx-2" OnClick="() => TestRunnerService.RunAllInPage(CurrentPageType)" Color="Color.Tertiary" Variant="Variant.Filled">Run all in page</MudButton>
        <MudSpacer/>
        @if (PreviousPage != null)
        {
            <MudPageLinkButton PageType="PreviousPage" Class="mx-2" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowLeft">Previous chapter</MudPageLinkButton>
        }
        @if (NextPage != null)
        {
            <MudPageLinkButton PageType="NextPage" Class="mx-2" Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.ArrowRight">Next chapter</MudPageLinkButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudImage Src="/img/ik-logo.jpg" Height="78" Width="120"></MudImage>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-8 pt-8 d-grid gap-3">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private Type CurrentPageType;
    private Type? NextPage;
    private Type? PreviousPage;
    
    
    protected override void OnParametersSet()
    {
        var absoluteUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var assembly = Assembly.GetExecutingAssembly();

        var routeTypes = assembly.GetTypes().Where(type => type.GetCustomAttributes<RouteAttribute>().Any());

        foreach (var type in routeTypes)
        {
            
            var routeAttribute = type.GetCustomAttributes<RouteAttribute>();;
            if (routeAttribute.Any())
            {
                if (routeAttribute.Any(p => p.Template.TrimStart('/') == absoluteUri.Trim()))
                {
                    CurrentPageType = type;
                    
                    break;
                }
            }
        }
        NavigationManager.LocationChanged += (sender, args) =>
        {
            var nextAndPreviousPages = NavigationService.GetNextAndPreviousPages(CurrentPageType);
            PreviousPage = nextAndPreviousPages.previousPage;
            NextPage = nextAndPreviousPages.nextPage;
            StateHasChanged();
        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        
        
        if (firstRender && CurrentPageType != null)
        {
            var nextAndPreviousPages = NavigationService.GetNextAndPreviousPages(CurrentPageType);
            PreviousPage = nextAndPreviousPages.previousPage;
            NextPage = nextAndPreviousPages.nextPage;
            StateHasChanged();
        }
    }
    

}