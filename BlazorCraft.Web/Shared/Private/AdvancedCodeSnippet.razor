@using Bunit
@using System.Text.RegularExpressions
@using BlazorCraft.Web.DI
@using BlazorCraft.Web.Shared.Examples._7_DependencyInjection
@using Microsoft.AspNetCore.Components.Rendering
@typeparam TComponent where TComponent : ComponentBase
@inject IServiceProvider ServiceProvider
@if (renderingFinished)
{
    @if (ShowComponentName || true)
    {
        <div class="d-flex pb-1 align-items-center gap-1 ">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.FileOpen"></MudIcon>
            <MudText class="fw-bold">@ComponentFileName</MudText>
        </div>
    }
    <CodeSnippet Language="razor">
        @_originalMarkup
    </CodeSnippet>

    @if (RenderOutput)
    {
        <MudGrid Spacing="2">
            <MudItem xs="6">
                <MudText class="fw-bold text-center">What it looks like visually</MudText>
                <MudPaper Elevation="0" Class="p-3 subtle-border">
                    <div id="codeSnippet_@typeof(TComponent).Name" class="code-container">
                        <DynamicComponent Type="@typeof(TComponent)"/>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem xs="6">
                <MudText class="fw-bold text-center">The html behind it</MudText>

                <CodeSnippet Language="html" @key="_uniqueKey">
                    @_renderedHtml
                </CodeSnippet>
            </MudItem>
        </MudGrid>
    }
}

@code {

    [Inject]
    private IJSRuntime _js { get; set; }

    [Parameter]
    public string Language { get; set; } = "razor";

    [Parameter]
    public bool ShowComponentName { get; set; } = true;

    [Parameter]
    public bool RenderOutput { get; set; } = false;

    private string ComponentFileName => $"{Regex.Replace(typeof(TComponent).Name, @"`\d+", "")}.razor";

    private bool renderingFinished = false;
    private string _originalMarkup;
    private string _renderedHtml;
    private DotNetObjectReference<AdvancedCodeSnippet<TComponent>> objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
        }
    }

    private TestContext _testContext;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _testContext = new TestContext();
        _testContext.Services.AddBlazorCraftServices();
        _testContext.Services.AddScoped<IExampleTransientService>(provider => ServiceProvider.GetRequiredService<IExampleTransientService>());
        _testContext.Services.AddScoped<IExampleScopedService>(provider => ServiceProvider.GetRequiredService<IExampleScopedService>());
        _testContext.Services.AddSingleton(_js);
        
        _originalMarkup = ReadOriginalMarkup();
        if (RenderOutput)
        {
            string renderedHtml = RenderComponentMarkup();
            var prettifiedHtml = await _js.InvokeAsync<string>("prettifyHtml", new object?[] { renderedHtml });
            _renderedHtml = prettifiedHtml;
        }
        renderingFinished = true;
        StateHasChanged();

        if (RenderOutput)
        {
            objRef = DotNetObjectReference.Create(this);
            await _js.InvokeVoidAsync("domWatcher.watch", $"codeSnippet_{typeof(TComponent).Name}", objRef);
        }

        await _js.InvokeVoidAsync("highlightSnippet");
        StateHasChanged();
    }


    [JSInvokable]
    public async Task OnDomChanged(string markup)
    {
        _renderedHtml = await _js.InvokeAsync<string>("prettifyHtml", new object?[] { markup });
        _renderedHtml = _renderedHtml.Replace("<!--!-->", "").Trim('\n', '\r');
        _uniqueKey = new object();
        await Task.Delay(1);
        StateHasChanged();
    }

    string RenderComponentMarkup()
    {
        //var componentRenderer = new ComponentRenderer();
        //componentRenderer.Services.AddBlazorCraftServices();
        //componentRenderer.Services.AddSingleton(_js);
        //return componentRenderer.RenderComponent();
        return _testContext.RenderComponent<TComponent>().Markup;
    }

    public class ComponentRenderer : TestContext
    {
        public string RenderComponent()
        {
            return RenderComponent<TComponent>().Markup;
        }
    }

    private string ReadOriginalMarkup()
    {
        var manifestResourceNames = typeof(TComponent).Assembly.GetManifestResourceNames();
        var key = manifestResourceNames.FirstOrDefault(x => x.Contains(ComponentFileName));
        using (var stream = typeof(TComponent).Assembly.GetManifestResourceStream(key))
        using (var reader = new StreamReader(stream))
        {
            var read = reader.ReadToEnd();
            return read;
        }
    }

    private object _uniqueKey = new object();
}