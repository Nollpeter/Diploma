@using System.Linq.Expressions
@typeparam TEnum where TEnum: struct, Enum
    <MudSelect T="@(TEnum?)" Value="Value" ValueChanged="ValueChanged" Disabled="Disabled" Label="@Label" RequiredError="@($"{Label}) is required")" For="For">
    
        <MudSelectItem T="@(TEnum?)" Value="@((TEnum?)null)"></MudSelectItem>
        @foreach (var enumValue in Enum.GetValues<TEnum>())
        {
            <MudSelectItem T="TEnum?" Value="enumValue">@enumValue.ToString()</MudSelectItem>
        }
    </MudSelect>
@code {
    [Parameter, EditorRequired]
    public TEnum? Value { get; set;}
    [Parameter, EditorRequired]
    public EventCallback<TEnum? > ValueChanged { get; set; }
    [Parameter]
    public Expression<Func<TEnum?>>? For { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public string Label { get; set; }

}