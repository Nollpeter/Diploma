@typeparam TEnum where TEnum: struct, Enum
@using MudBlazor
@inherits MudSelect<TEnum?>
@{
    base.BuildRenderTree(__builder);
}
@code {
    protected override void OnInitialized()
    {
        base.OnInitialized();
        ChildContent = Items;
    }

    protected RenderFragment Items => builder =>
    {
        int seq = 0;
        
        // Add a null option
        builder.OpenComponent<MudSelectItem<TEnum?>>(seq++);
        builder.AddAttribute(seq++, "Value", (TEnum?)null);
        builder.CloseComponent();

        // Add the enum values
        foreach (var enumValue in Enum.GetValues<TEnum>())
        {
            builder.OpenComponent<MudSelectItem<TEnum?>>(seq++);
            builder.AddAttribute(seq++, "Value", enumValue);
            builder.AddContent(seq++, enumValue.ToString());
            builder.CloseComponent();
        }
    };
}
@*@using System.Linq.Expressions
@typeparam TEnum where TEnum: struct, Enum
    <MudSelect T="@(TEnum?)" Value="Value" ValueChanged="ValueChanged" Disabled="Disabled" Label="@Label" RequiredError="@($"{Label}) is required")" For="For">
    
        <MudSelectItem T="@(TEnum?)" Value="@((TEnum?)null)"></MudSelectItem>
        @foreach (var enumValue in Enum.GetValues<TEnum>())
        {
            <MudSelectItem T="TEnum?" Value="enumValue">@enumValue.ToString()</MudSelectItem>
        }
    </MudSelect>
@code {
    [Parameter, EditorRequired]
    public TEnum? Value { get; set;}
    [Parameter, EditorRequired]
    public EventCallback<TEnum? > ValueChanged { get; set; }
    [Parameter]
    public Expression<Func<TEnum?>>? For { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public string Label { get; set; }

}*@