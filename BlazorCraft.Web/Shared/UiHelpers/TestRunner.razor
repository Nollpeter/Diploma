@using System.Reflection
@using BlazorCraft.Web.Infrastructure
@using BlazorCraft.Web.Infrastructure.Attributes
@using BlazorCraft.Web.Tests
@typeparam TTestClass
@inject ITestRunnerService TestRunnerService
@if (_isInitialized)
{
    <div>
        <MudPaper Elevation="3" Class="p-3">
            <MudText Class="fw-bold mb-2">Automated tests for exercise:</MudText>
            <div class="d-flex justify-content-between align-items-center ">
                <div class="d-flex justify-content-start align-items-center gap-3">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PlayArrow" IconColor="Color.Success" OnClick="() => TestRunnerService.RunAllInTestClass(typeof(TTestClass))">Run all</MudButton>
                    <MudText Typo="Typo.body1">Successful: <strong>@_testDescriptors.Count(p => p.Value is {IsSuccessful:true})/@_testDescriptors.Count</strong></MudText>
                    <MudText Typo="Typo.body1">Failed: <strong>@_testDescriptors.Count(p => p.Value is {IsSuccessful: false })/@_testDescriptors.Count</strong></MudText>
                    <MudText Typo="Typo.body1">Not run: <strong>@_testDescriptors.Count(p => p.Value is null)/@_testDescriptors.Count</strong></MudText>
                </div>
                <MudText Typo="Typo.body1" Class="text-end">Component under test: <strong>@TestComponentName</strong>.razor</MudText>
            </div>
            <MudTreeView Items="_testDescriptors.ToHashSet()" Hover="true">
                <ItemTemplate Context="test">
                    <MudTreeViewItem T="KeyValuePair<TestDescriptor, TestRunResult>">
                        <BodyContent>
                            <div class="d-flex justify-content-start align-items-center">
                                @*<div class="d-flex justify-content-start align-items-center">*@
                                <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
                                <MudIconButton OnClick="@(() => TestRunnerService.RunTest(test.Key))" Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Medium" Color="Color.Success"/>
                                <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
                                @switch (test.Value)
                                {
                                    case null:
                                        <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="@Color.Default" Size="Size.Small"/>
                                        break;
                                    default:
                                    {
                                        if (test.Value!.IsSuccessful)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="@Color.Success"/>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Error" Color="@Color.Error"/>
                                        }
                                        break;
                                    }
                                }
                                <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
                                <MudText Color="@GetTextColor(test)">@test.Key.Title</MudText>
                            </div>
                        </BodyContent>
                        <ChildContent >
                            <MudPaper Elevation="1" Class="p-2 m-0 subtle-border">
                                <div class="d-flex flex-column gap-3 ">
                                    <MudText Typo="Typo.subtitle1" Class="fw-bold">@test.Key.Description</MudText>
                                    <MudText>Result:</MudText>
                                    @if (test.Value is HtmlMarkupMismatchTestRunResult htmlMarkupMismatchTestRunResult)
                                    {
                                        <MudText Typo="Typo.body1">@test.Value.ErrorMessage</MudText>
                                        <div class="row">
                                            <div class="col-6"><MudText Typo="Typo.subtitle1" Class="fw-bold">Expected HTML markup: </MudText>
                                                                                                               <CodeSnippet>
                                                                                                                   @htmlMarkupMismatchTestRunResult.ExpectedMarkup
                                                                                                               </CodeSnippet></div>
                                            <div class="col-6">
                                                 <MudText Typo="Typo.subtitle1" Class="fw-bold">Actual HTML markup: </MudText>
                                                                                                 <CodeSnippet>
                                                                                                     @htmlMarkupMismatchTestRunResult.ActualMarkup
                                                                                                 </CodeSnippet>  </div>
                                        </div>
                                    }
                                    else if (test.Value is {ErrorMessage: not null })
                                    {
                                        <MudText Typo="Typo.body1">@test.Value.ErrorMessage</MudText>
                                    }
                                    else if (test.Value?.IsSuccessful ?? false)
                                    {
                                        <MudText Color="Color.Success">Test was successful!</MudText>
                                    }
                                </div>
                            </MudPaper>
                        </ChildContent>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
            @if (_testDescriptors.All(p => p.Value?.IsSuccessful ?? false) && ComponentUnderTestParameters != null)
            {
                <MudPaper Elevation="0" Class="p-2 subtle-border">
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Celebration" Color="Color.Secondary"></MudIcon>
                        <MudText Class="fw-bold" Typo="Typo.subtitle1">Congratulations! All tests passed, you successfully passed the exercise!</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Celebration" Color="Color.Tertiary"></MudIcon>
                    </div>
                    <MudText Typo="Typo.subtitle1">Take a look and feel free to play around with the component you finished!</MudText>
                    <MudDivider DividerType="DividerType.Middle" Class="border-2 border-dark mb-2" ></MudDivider>
                        @CreateComponent(GetComponentUnderTest(), ComponentUnderTestParameters)
                </MudPaper>
            }
        </MudPaper>
    </div>
}
else
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
}

@code {

    Dictionary<TestDescriptor, TestRunResult?> _testDescriptors = null!;
    bool _isInitialized = false;

    [Parameter]
    public IDictionary<string, object>? ComponentUnderTestParameters { get; set; }

    private RenderFragment CreateComponent(Type componentType, IDictionary<string, object> parameters) => builder =>
    {
        builder.OpenComponent(0, componentType);
        if (parameters != null)
        {
            foreach (var parameter in parameters)
            {
                builder.AddAttribute(1, parameter.Key, parameter.Value);
            }
        }
        builder.CloseComponent();
    };

    [Parameter]
    public string TestComponentName { get; set; } = GetComponentUnderTest().Name;

    public static Type GetComponentUnderTest()
    {
        Type typeToCheck = typeof(TTestClass);

        while (typeToCheck != null && typeToCheck != typeof(object))
        {
            if (typeToCheck.IsGenericType)
            {
                return typeToCheck.GetGenericArguments().FirstOrDefault();
            }

            typeToCheck = typeToCheck.BaseType;
        }

        return typeof(object);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _testDescriptors = TestRunnerService.GetTestRunResultMethods(typeof(TTestClass));
        _isInitialized = true;
        StateHasChanged();

        TestRunnerService.TestStateChanged += (sender, args) =>
        {
            if (_testDescriptors.ContainsKey(args.TestDescriptor))
            {
                if (args.TestRunResult != null)
                {
                    _testDescriptors[args.TestDescriptor] = args.TestRunResult;
                }
                StateHasChanged();
            }
        };
    }

    private Color GetTextColor(KeyValuePair<TestDescriptor, TestRunResult> value)
    {
        if (value.Value == null)
        {
            return Color.Dark;
        }
        else if (value.Value.IsSuccessful)
        {
            return Color.Success;
        }
        else
        {
            return Color.Error;
        }
    }

}