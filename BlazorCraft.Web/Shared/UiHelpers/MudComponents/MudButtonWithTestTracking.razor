@*@typeparam T 
@using BlazorCraft.Web.Infrastructure
@inherits MudButton

@inject ITestRunnerService TestRunnerService

<div class="d-flex justify-content-start align-items-center">
    <MudButton OnClick="@(() => TestRunnerService.RunAllInTestClass(typeof(TTestClass)))" Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" Color="Color.Success"/>
                                    <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
    <MudIcon Size="Size.Small" Icon="@_icon" Color="_iconColor"></MudIcon>
    <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
    @ChildContent
</div>

@code {
    private TestRunSession _session;
    private string _icon = Icons.Material.Outlined.QuestionMark;
    private Color _iconColor = Color.Default;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _session = TestRunnerService.GetSessionForTestClass(typeof(T));
        TestRunnerService.TestStateChanged += (sender, args) =>
        {
            if (args.TestDescriptor.TestClass
                != typeof(T)) return;

            _session[args.TestDescriptor] = args.TestRunState;
            
            switch (_session.GetSessionStateInTestClass(typeof(T)))
            {
                case TestRunState.NotStarted:
                    _icon = Icons.Material.Filled.QuestionMark;
                    break;
                case TestRunState.Running:
                    _icon = CustomIcons.SpinnerSmall;
                    _iconColor = Color.Primary;
                    break;
                case TestRunState.Successful:
                    _icon = Icons.Material.Filled.Check;
                    _iconColor = Color.Success;
                    break;
                case TestRunState.Error:
                    _icon = Icons.Material.Filled.Error;
                    _iconColor = Color.Error;
                    break;
                case TestRunState.AtLeastOneNotStarted:
                    _icon = Icons.Material.Outlined.Warning;
                    _iconColor = Color.Warning;
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
            StateHasChanged();
        };
    }
    
}*@