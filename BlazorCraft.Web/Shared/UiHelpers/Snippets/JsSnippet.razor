@inject IJSRuntime JsRuntime

@if (renderingFinished)
{
    <MudDivider/>
    @if (ShowComponentName || true)
    {
        <div class="d-flex pb-1 align-items-center gap-1 ">
            <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.FileOpen"></MudIcon>
            <MudText class="fw-bold">@JsFileName</MudText>
        </div>
    }
    <CodeSnippet Language="javascript">
        @_originalMarkup
    </CodeSnippet>
    <MudDivider/>
}

@code {

    [Parameter, EditorRequired]
    public required string JsFileName { get; set; }

    [Parameter]
    public bool ShowComponentName { get; set; } = true;


    private bool renderingFinished = false;
    private string _originalMarkup = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _originalMarkup = ReadOriginalMarkup();
        renderingFinished = true;
        StateHasChanged();


        await JsRuntime!.InvokeVoidAsync("highlightSnippet");
        StateHasChanged();
    }


    private string ReadOriginalMarkup()
    {
        var manifestResourceNames = GetType().Assembly.GetManifestResourceNames();
        var key = manifestResourceNames.FirstOrDefault(x => x.Contains(JsFileName));

        if (key == null)
        {
            throw new FileNotFoundException(JsFileName);
        }
        using (var stream = GetType().Assembly.GetManifestResourceStream(key))
        using (var reader = new StreamReader(stream!))
        {
            var read = reader.ReadToEnd();
            return read;
        }
    }
}