@using System.Reflection
@using BlazorCraft.Web.Infrastructure
@using BlazorCraft.Web.Infrastructure.Attributes
@using BlazorCraft.Web.Tests
@typeparam TTestClass
@inject ITestRunnerService TestRunnerService
@inject IServiceProvider ServiceProvider
@if (_isInitialized)
{
    <div>
        <MudPaper Elevation="3" Class="p-3">
            <MudText Typo="Typo.h6">Exercise runner</MudText>
            <MudDivider />
            <MudText Typo="Typo.subtitle1" Class="fw-bold">You can take a look of your component's current state:</MudText>
            <ErrorBoundary>
                <ChildContent>
                    <div class="my-1 p-2 subtle-border">
                        @if (ComponentUnderTestHelperFragment != null)
                        {
                            <MudDivider DividerType="DividerType.Middle" Class="border-2 border-dark mb-2"></MudDivider>
                            @ComponentUnderTestHelperFragment
                            <MudDivider DividerType="DividerType.Middle" Class="border-2 border-dark mb-2"></MudDivider>
                        }
                        <DynamicComponent Type="GetComponentUnderTest()" Parameters="ComponentUnderTestParameters"></DynamicComponent>
                    </div>
                </ChildContent>
                <ErrorContent>
                    <MudText Typo="Typo.subtitle1" Color="Color.Error">In its current state, the component cannot be rendered! Please carry on with implementing it, as soon as it reaches the point where it can render, you will see it here!</MudText>
                </ErrorContent>
            </ErrorBoundary>
            <MudDivider/>
            <MudText Class="fw-bold mt-1 mb-2">Automated tests for exercise:</MudText>
            <div class="d-flex justify-content-between align-items-center ">
                <div class="d-flex justify-content-start align-items-center gap-3">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.PlayArrow" IconColor="Color.Success" OnClick="() => TestRunnerService.RunAllInTestClass(typeof(TTestClass))">Run all</MudButton>
                    <MudText Typo="Typo.body1">Successful: <strong>@_session.Count(p => p.Value ==TestRunState.Successful)/@_session.Count</strong></MudText>
                    <MudText Typo="Typo.body1">Failed: <strong>@_session.Count(p => p.Value == TestRunState.Error)/@_session.Count</strong></MudText>
                    <MudText Typo="Typo.body1">Not run: <strong>@_session.Count(p => p.Value == TestRunState.NotStarted)/@_session.Count</strong></MudText>
                </div>
                <MudText Typo="Typo.body1" Class="text-end">Component under test: <strong>@TestComponentName</strong>.razor</MudText>
            </div>
            <MudTreeView Items="_testResults.ToHashSet()" Hover="true">
                <ItemTemplate Context="test">
                    <MudTreeViewItem T="KeyValuePair<TestDescriptor, TestRunResult?>">
                        <BodyContent>
                            <div class="d-flex justify-content-start align-items-center">
                                <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
                                @switch (_session[test.Key!])
                                {
                                    case TestRunState.NotStarted:
                                        <MudIcon Icon="@Icons.Material.Filled.QuestionMark" Color="@Color.Default"/>
                                        break;
                                    case TestRunState.Running:
                                        <MudIcon Icon="@CustomIcons.SpinnerSmall" Color="Color.Primary"/>
                                        break;
                                    case TestRunState.Successful:
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="@Color.Success"/>
                                        break;
                                    case TestRunState.Error:
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="@Color.Error"/>
                                        break;
                                    case TestRunState.AtLeastOneNotStarted:
                                    default:
                                    {
                                        throw new NotImplementedException();
                                    }
                                }
                                <MudDivider Vertical="true" Class="bg-dark fw-bold mx-2"/>
                                <MudText Color="@GetTextColor(test)">
                                    @if (test.Key.IsPrecondition)
                                    {
                                        <strong>[Precondition] </strong>
                                    }
                                    @test.Key.Title
                                </MudText>
                            </div>
                        </BodyContent>
                        <ChildContent >
                            <MudPaper Elevation="1" Class="p-2 m-0 subtle-border">
                                <div class="d-flex flex-column gap-3 ">
                                    <MudText Typo="Typo.subtitle1" Class="fw-bold">@test.Key.Description</MudText>
                                    <MudText>Result:</MudText>
                                    @switch (test.Value)
                                    {
                                        case HtmlMarkupMismatchTestRunResult htmlMarkupMismatchTestRunResult:
                                            <HtmlMarkupMismatch TestRunResult="@htmlMarkupMismatchTestRunResult"/>
                                            break;
                                        case PreconditionsNotMetTestRunResult preconditionsNotMetTestRunResult:
                                            <PreconditionsNotMet TestRunResult="preconditionsNotMetTestRunResult"/>
                                            break;
                                        case CollectionsNotEquivalentTestRunResult collectionsNotEquivalentTestRunResult:
                                            <CollectionsNotEqual TestRunResult="collectionsNotEquivalentTestRunResult"/>
                                            break;
                                        case { ErrorMessage: not null }:
                                            <MudText Class="text-start" Typo="@Typo.body1" Color="Color.Error">@test.Value.ErrorMessage</MudText>
                                            break;
                                        default:
                                        {
                                            if (test.Value?.IsSuccessful ?? false)
                                            {
                                                <MudText Color="@Color.Success">Test was successful!</MudText>
                                            }

                                            break;
                                        }
                                    }
                                </div>
                            </MudPaper>
                        </ChildContent>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
            @if (_testResults.All(p => p.Value?.IsSuccessful ?? false) && ComponentUnderTestParameters != null)
            {
                <MudPaper Elevation="0" Class="p-2 subtle-border">
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Celebration" Color="Color.Secondary"></MudIcon>
                        <MudText Class="fw-bold" Typo="Typo.subtitle1">Congratulations! All tests passed, you successfully passed the exercise!</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Celebration" Color="Color.Tertiary"></MudIcon>
                    </div>

                </MudPaper>
            }
        </MudPaper>
    </div>
}
else
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
}

@code {

    Dictionary<TestDescriptor, TestRunResult?> _testResults = null!;
    TestRunSession _session = null!;
    bool _isInitialized = false;

    [Parameter]
    public IDictionary<string, object>? ComponentUnderTestParameters { get; set; }

    [Parameter]
    public RenderFragment? ComponentUnderTestHelperFragment { get; set; }

    [Parameter]
    public string TestComponentName { get; set; } = GetComponentUnderTest().Name;

    public static Type GetComponentUnderTest()
    {
        Type? typeToCheck = typeof(TTestClass);

        while (typeToCheck != null && typeToCheck != typeof(object))
        {
            if (typeToCheck.IsGenericType)
            {
                return typeToCheck.GetGenericArguments().First();
            }

            typeToCheck = typeToCheck.BaseType;
        }

        return typeof(object);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _testResults = TestRunnerService.GetTestRunResultMethods(typeof(TTestClass));
        _session = TestRunnerService.GetSessionForTestClass(typeof(TTestClass));
        _isInitialized = true;
        StateHasChanged();

        TestRunnerService.TestStateChanged += (sender, args) =>
        {
            _testResults = TestRunnerService.GetTestRunResultMethods(typeof(TTestClass));
            _session = TestRunnerService.GetSessionForTestClass(typeof(TTestClass));
            StateHasChanged();
        };
    }

    private Color GetTextColor(KeyValuePair<TestDescriptor, TestRunResult?> value)
    {
        if (!_session.ContainsKey(value.Key))
        {
            Console.WriteLine("Not contains");
            return Color.Default;
        }

        var testRunState = _session[value.Key];

        switch (testRunState)
        {
            case TestRunState.NotStarted:
                return Color.Default;
            case TestRunState.Running:
                return Color.Primary;
            case TestRunState.Successful:
                return Color.Success;
            case TestRunState.Error:
                return Color.Error;
            case TestRunState.AtLeastOneNotStarted:
            default:
            {
                throw new NotImplementedException();
            }
        }
    }

}