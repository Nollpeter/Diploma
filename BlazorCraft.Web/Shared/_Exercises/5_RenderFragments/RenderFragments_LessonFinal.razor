@using System.Reflection

<div class="d-flex">
    <button class="btn btn-primary list-view">List view</button>
    <button class="btn btn-primary table-view">Table view</button>
</div>
<div class="ex-final-container">
    @* List component implementations should come here *@
    @* for each property, use a template like this: <span class="mx-1">{rendered value},</span> *@
</div>

@code {


    [Parameter]
    public List<Employee> Employees { get; set; } = null!;

    public record Employee(int Id, string FirstName, string LastName, string Position);

    public IList<PropertyInfo> GetProperties()
    {
    // You can use the .Name property on the result list items to show its name like Id, FirstName, LastName, Postion
        return typeof(Employee).GetProperties(BindingFlags.Instance | BindingFlags.Public);
    }


    public string GetPropertyValue(PropertyInfo propertyInfo, object objectToRender)
    {
    // This will get the actual value for the property, like "Test", "CFO"? etc. 
    // !! Don't forget that it needs the actual employee object as a parameter !!
        return propertyInfo.GetValue(objectToRender)?.ToString() ?? "";
    }

}