@using System.Reflection

<div class="d-flex">
    <button class="btn btn-primary list-view" @onclick="() => isListView = true">List view</button>
    <button class="btn btn-primary table-view" @onclick="() => isListView = false">Table view</button>
</div>
<div class="ex-final-container">
    @* List component implementations should come here *@
    @if (isListView)
    {
        <ListComponent5 T="Employee" ListItems="Employees">
            <Title><h2>Employees</h2></Title>
            <ListTemplate>
                <ul>
                    @context
                </ul>
            </ListTemplate>
            <ListItemTemplate>
                <li>
                    @foreach (var property in GetProperties())
                    {
                        <span>@(property.Name): @GetPropertyValue(property, context)</span>
                    }
                </li>
            </ListItemTemplate>
        </ListComponent5>
    }
    else
    {
        <ListComponent5 T="Employee" ListItems="Employees">
            <Title><h2>Employees</h2></Title>
                <ListItemTemplate>
                    <tr>
                        @foreach (var property in GetProperties())
                        {
                            <td>@GetPropertyValue(property, context)</td>
                        }
                    </tr>
                    </ListItemTemplate>
                    <ListTemplate>
                        <table class="table">
                            <thead>
                            <tr>
                                @foreach (var property in GetProperties())
                                {
                                    <th>@property.Name</th>    
                                }
                            </tr>
                            </thead>
                            <tbody>
                            @context
                            </tbody>
                        </table>
                    </ListTemplate>
        </ListComponent5>
    }
</div>

@code {


    [Parameter]
    public List<Employee> Employees { get; set; }

    bool isListView = true;

    public record Employee(int Id, string FirstName, string LastName, string Position);

    public IList<PropertyInfo> GetProperties()
    {
    // You can use the .Name property on the result list items to show its name like Id, FirstName, LastName, Postion
        return typeof(Employee).GetProperties(BindingFlags.Instance | BindingFlags.Public);
    }


    public string GetPropertyValue(PropertyInfo propertyInfo, object objectToRender)
    {
    // This will get the actual value for the property, like "Test", "CFO"? etc. 
    // !! Don't forget that it needs the actual employee object as a parameter !!
        return propertyInfo.GetValue(objectToRender)?.ToString() ?? "";
    }

}