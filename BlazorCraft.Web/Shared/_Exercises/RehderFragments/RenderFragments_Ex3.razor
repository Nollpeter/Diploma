@using System.Reflection
@typeparam TContent
<div id="ex3-container">
    <button class="toggle" @onclick="() => _detailsVisible = !_detailsVisible">Toggle details visibility</button>
    <div class="accordion">
        @* Accordion content should come here *@
        <div class="title">
            @TitleContent
        </div>
        <div class="details">
            @if (_detailsVisible)
            {
                <ul>
                    @foreach (var property in GetProperties(ObjectToRender))
                    {
                        <li>@property.Name: @GetPropertyValue(property, ObjectToRender)</li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private bool _detailsVisible = false;

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter]
    public TContent ObjectToRender { get; set; }
    
    public IList<PropertyInfo> GetProperties(object objectToRender)
    {
        // You can use the .Name property on the result list items to show its name like Id, FirstName, LastName, Postion
        return objectToRender.GetType().GetProperties();
    }

    
    public string GetPropertyValue(PropertyInfo propertyInfo, object objectToRender)
    {
        // This will get the actual value for the property, like "Test", "CFO"? etc. 
        // !! Don't forget that it needs the actual employee object as a parameter !!
        return propertyInfo.GetValue(objectToRender)?.ToString() ?? "";
    }

}